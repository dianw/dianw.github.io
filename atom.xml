<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dian Aditya]]></title>
  <link href="http://diian.org/atom.xml" rel="self"/>
  <link href="http://diian.org/"/>
  <updated>2014-10-17T01:18:05+07:00</updated>
  <id>http://diian.org/</id>
  <author>
    <name><![CDATA[Dian Aditya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GIS Part 3 - Membuat REST API Dengan S2Rest Plugin]]></title>
    <link href="http://diian.org/blog/2014/10/17/gis-part-3-membuat-rest-api-dengan-s2rest-plugin/"/>
    <updated>2014-10-17T01:04:15+07:00</updated>
    <id>http://diian.org/blog/2014/10/17/gis-part-3-membuat-rest-api-dengan-s2rest-plugin</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS Part 2 - Pencarian Informasi Spasial Menggunakan Hibernate Search/Lucene]]></title>
    <link href="http://diian.org/blog/2012/12/19/gis-part-2-pencarian-informasi-spasial-menggunakan-hibernate-search-lucene/"/>
    <updated>2012-12-19T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/12/19/gis-part-2-pencarian-informasi-spasial-menggunakan-hibernate-search-lucene</id>
    <content type="html"><![CDATA[<p>Berikut ini adalah posting saya yang kedua mengenai GIS, karena topik ini dibagi menjadi 4 bagian, saya sangat menyarankan anda untuk membaca secara berurutan.</p>

<ul>
 <li><a href="http://blogs.mervpolis.com/roller/dwx/entry/gis_part_1_mengkonsumsi_data" target="_blank">Part 1 - Mengkonsumsi Data Tiles dengan Leaflet</a></li>
 <li><a href="http://blogs.mervpolis.com/roller/dwx/entry/gis_part_2_pencarian_informasi" target="_blank">Part 2 - Pencarian Informasi Spasial menggunakan Hibernate Search/Lucene</a></li>
 <li>Part 3 - Membuat REST API dengan S2Rest Plugin</li>
 <li>Part 4 - Mengkonsumsi Informasi Spatial dengan Leaflet dan JQuery</li>
</ul>


<h2>Pencarian Informasi Spasial menggunakan Hibernate Search/Lucene</h2>

<p>Pernah pakai aplikasi yang berhubungan dengan point of interest seperti foursquare atau google latitude? Ya dua aplikasi yang saya sebutkan tersebut adalah contoh implementasi dari sebuah service yang sangat berkaitan erat dengan lokasi dan koordinat. Ketika kita membuka aplikasi, melalui browser atau perangkat mobile misalnya, aplikasi akan secara otomatis membaca koordinat dimana perangkat berada melalui GPS (dengan seizin pemilik perangkat tentunya) dan kemudian menamplikan lokasi-lokasi terdekat dengan radius tertentu dari lokasi user berada.</p>

<p>Pada bagian ini saya akan membahas bagaimana implementasi pengolahan data spatial menggunakan Hibernate Search.Hibernate Search adalah salah satu komponen Hibernate yang mengintegrasikan kemampuan search engine dari Apache Lucence kedalam Hiberante dan JPA model. Apache Lucene adalah pustaka yang sangat powerful untuk melakukan pencarian teks bebas secara efisien, disamping itu Lucene juga mendukung spatial search yang akan saya bahas kali ini. Hibernate Search mulai mendukung spatial search sejak versi 4.2.0.Beta1, versi terupdate ketika tulisan ini dibuat adalah 4.2.0.Beta2.</p>

<p>Karena masih dalam versi beta, beberapa fitur masih belum dapat digunakan dengan sempurna, salah satunya adalah error untuk query sort berdasarkan jarak terdekat.</p>

<p>Dalam kasus kali ini saya akan menggunakan fitur spatial search untuk menampilkan objek terdekat dari suatu koordinat dalam radius tertentu (lihat ilustrasi dibawah ini). Kumpulan objek dan koordinat disimpan dalam database. Koordinat berbasis latitude (garis lintang) dan longitude (garis bujur).</p>

<p><img src="https://lh4.googleusercontent.com/-b_S9JbJhybw/UNEtqpncnMI/AAAAAAAAADY/oa6tkD_FLDc/s800/map_3km_radius.png" title="Monas, Radius 3 KM" alt=""></p>

<p>Pada ilustrasi diatas titik tengah berada pada monumen nasional, lingkaran berwarna abu-abu adalah daerah dalam radius 3 KM dari titik tengah. Titik biru yang berada di dalam lingkaran adalah daerah yang terseleksi. Sedangkan titik diluarnya adalah sebaliknya.</p>

<h3>Kode</h3>

<p>Untuk permulaan mari membuat desain table sederhana, karena Hibernate berbasis Object Relational Mapping (ORM) untuk contoh ini saya akan membuat sebuah JPA entity untuk mewakilkan table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span>
</span><span class='line'><span class="nd">@Indexed</span>
</span><span class='line'><span class="nd">@Spatial</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;location&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Location</span> <span class="kd">implements</span> <span class="n">Coordinates</span><span class="o">,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">Double</span> <span class="n">latitude</span><span class="o">;</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">Double</span> <span class="n">longitude</span><span class="o">;</span>
</span><span class='line'> <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Anotasi <code>@Indexed</code> mengindikasikan bahwa class tersebut akan diindex oleh Lucene. Anotasi <code>@Spatial</code> wajib agar data dapat diquery, entity juga diharuskan untuk mengimplementasikan interface <code>org.hibernate.search.spatial.Coordinates</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Coordinates</span> <span class="o">{</span>
</span><span class='line'> <span class="n">Double</span> <span class="nf">getLatitude</span><span class="o">();</span>
</span><span class='line'> <span class="n">Double</span> <span class="nf">getLongitude</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya mari membuat data awal.</p>

<table class="table table-bordered table-condensed table-striped">
 <thead>
  <tr>
   <th>ID</th>
   <th>NAME</th>
   <th>LATITUDE</th>
   <th>LONGITUDE</th>
  </tr>
 </thead>
 <tbody>
  <tr>
   <td>1</td>
   <td>Krukut</td>
   <td>-6.1583</td>
   <td>106.81458</td>
  </tr>
  <tr>
   <td>2</td>
   <td>Kampung Bali</td>
   <td>-6.18476</td>
   <td>106.8187</td>
  </tr>
  <tr>
   <td>3</td>
   <td>Kebon Sirih</td>
   <td>-6.18595</td>
   <td>106.83517</td>
  </tr>
  <tr>
   <td>4</td>
   <td>Senen</td>
   <td>-6.17657</td>
   <td>106.84376</td>
  </tr>
  <tr>
   <td>5</td>
   <td>Gondangdia</td>
   <td>-6.19449</td>
   <td>106.83105</td>
  </tr>
  <tr>
   <td>6</td>
   <td>Kemayoran</td>
   <td>-6.16684</td>
   <td>106.84874</td>
  </tr>
  <tr>
   <td>7</td>
   <td>Cikini</td>
   <td>-6.19397</td>
   <td>106.84221</td>
  </tr>
  <tr>
   <td>8</td>
   <td>Gunung Sahari</td>
   <td>-6.16086</td>
   <td>106.84462</td>
  </tr>
  <tr>
   <td>9</td>
   <td>Cideng</td>
   <td>-6.17554</td>
   <td>106.80891</td>
  </tr>
  <tr>
   <td>10</td>
   <td>Jati Pulo</td>
   <td>-6.18186</td>
   <td>106.80307</td>
  </tr>
  <tr>
   <td>11</td>
   <td>Tomang</td>
   <td>-6.17307</td>
   <td>106.79646</td>
  </tr>
  <tr>
   <td>12</td>
   <td>Glodok</td>
   <td>-6.14738</td>
   <td>106.81303</td>
  </tr>
  <tr>
   <td>13</td>
   <td>Cempaka Baru</td>
   <td>-6.17059</td>
   <td>106.86522</td>
  </tr>
 </tbody>
</table>


<p>Langkah terakhir adalah membuat query untuk menampilkan lokasi dalam radius 3 KM dari titik tengah.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param radius</span>
</span><span class='line'><span class="cm"> * Radius dalam Kilometer</span>
</span><span class='line'><span class="cm"> * @param lat</span>
</span><span class='line'><span class="cm"> * Latitude</span>
</span><span class='line'><span class="cm"> * @param lng</span>
</span><span class='line'><span class="cm"> * Longitude</span>
</span><span class='line'><span class="cm"> * @return List Location dalam radius dari titik tengah (lat, lng)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">location</span><span class="o">&gt;</span> <span class="nf">getLocations</span><span class="o">(</span><span class="kt">int</span> <span class="n">radius</span><span class="o">,</span> <span class="kt">double</span> <span class="n">lat</span><span class="o">,</span> <span class="kt">double</span> <span class="n">lng</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">FullTextEntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">Search</span><span class="o">.</span><span class="na">getFullTextEntityManager</span><span class="o">(</span><span class="n">entityManager</span><span class="o">);</span>
</span><span class='line'> <span class="n">QueryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getSearchFactory</span><span class="o">().</span><span class="na">buildQueryBuilder</span><span class="o">().</span><span class="na">forEntity</span><span class="o">(</span><span class="n">Location</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'> <span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">spatial</span><span class="o">().</span><span class="na">onCoordinates</span><span class="o">(</span><span class="s">&quot;location&quot;</span><span class="o">).</span><span class="na">within</span><span class="o">(</span><span class="n">radius</span><span class="o">,</span> <span class="n">Unit</span><span class="o">.</span><span class="na">KM</span><span class="o">).</span><span class="na">ofLatitude</span><span class="o">(</span><span class="n">lat</span><span class="o">).</span><span class="na">andLongitude</span><span class="o">(</span><span class="n">lng</span><span class="o">).</span><span class="na">createQuery</span><span class="o">();</span>
</span><span class='line'> <span class="n">FullTextQuery</span> <span class="n">q</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createFullTextQuery</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">Location</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">return</span> <span class="n">q</span><span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></location>
Method diatas akan mencari instance (Location) yang berada di dalam radius dari latitude dan longitude yang telah dimasukkan.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIS Part 1 - Mengkonsumsi Data Tiles Dengan Leaflet]]></title>
    <link href="http://diian.org/blog/2012/10/14/gis-part-1-mengkonsumsi-data-tiles-dengan-leaflet/"/>
    <updated>2012-10-14T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/10/14/gis-part-1-mengkonsumsi-data-tiles-dengan-leaflet</id>
    <content type="html"><![CDATA[<p>Sesuai dengan prefix judul posting saya kali ini, GIS (Geographic Information System) atau dalam bahasa Indonesia disebut SIG (Sistem Informasi Geografis), saya akan membahas secara tuntas implementasi sederhana dari GIS dari awal hingga akhir. Ya, saya ulangi lagi, tuntas dari awal hingga akhir (jangan lupakan kata sederhana). Kasus yang akan saya jadikan contoh kali ini adalah pengolahan informasi lokasi berdasarkan koordinat, contoh paling populer dari kasus ini adalah Foursquare dan Google Latitude. Karena pembahasan kasus ini cukup panjang, saya akan membagi postingan ini menjadi 4 bab, diantaranya:</p>

<ul>
 <li><a href="http://blogs.mervpolis.com/roller/dwx/entry/gis_part_1_mengkonsumsi_data" target="_blank">Part 1 - Mengkonsumsi Data Tiles dengan Leaflet</a></li>
 <li><a href="http://blogs.mervpolis.com/roller/dwx/entry/gis_part_2_pencarian_informasi" target="_blank">Part 2 - Pencarian Informasi Spasial menggunakan Hibernate Search/Lucene</a></li>
 <li>Part 3 - Membuat REST API dengan S2Rest Plugin</li>
 <li>Part 4 - Mengkonsumsi Informasi Spatial dengan Leaflet dan JQuery</li>
</ul>


<p>Lengkap bukan?</p>

<h2>Mengkonsumsi Data Tiles dengan Leaflet</h2>

<p> Tiles adalah ubin, lalu apa hubungannya ubin dengan peta? Analogi sederhananya adalah sebagai berikut, untuk melapisi dinding kamar mandi ataupun dapur di rumah anda, diperlukan kumpulan keramik berbentuk persegi yang ditempelkan secara rapi dalam susunan grid. Konsep inilah yang mendasari tiles pada peta, yaitu kumpulan bitmap berbentuk persegi yang disusun untuk membentuk sebuah peta.
 Tiles secara umum adalah gambar berukuran 256 x 256 pixel, meskipun tidak selalu begitu, sebagai contoh CloudMade menyediakan gambar berukuran 64 x 64 pixel untuk kebutuhan mobile, namun secara keseluruhan gambar 256 x 256 pixel menjadi standart secara de facto yang dipimpin oleh Google Maps.
 Dalam implementasinya banyak pustaka yang disediakan di internet untuk mengkonsumsi tiles. Untuk menampilakan ke dalam web umumnya pustaka dibangun diatas javascript, beberapa pustaka javascript yang populer digunakan adalah:</p>

<ul>
 <li style="text-align: justify; "><a href="https://developers.google.com/maps/" target="_blank">Google Maps API</a>. Sedikit catatan untuk penggunaan GMaps API, layanan ini bersifat komersial untuk kondisi tertentu. Google juga menentukan kebijakan dengan menyertakan iklan di dalamnya. Ingin menggunakan kode javascript GMaps pada local intranet? Sepertinya anda perlu membayar sekitar $10.000 per tahun untuk dapat melakukannya.</li>
 <li style="text-align: justify; "><a href="http://openlayers.org/" target="_blank">Openlayers</a>, digunakan oleh <a href="http://www.openstreetmap.org/" target="_blank">OpenstreetMap</a>, kaya fitur, serta opensource. Akan tetapi cukup kompleks dan memiliki ukuran yang cukup besar untuk sebuah file javascript.</li>
 <li style="text-align: justify; "><a href="http://leaflet.cloudmade.com/" target="_blank">Leaflet</a>, dikembangkan oleh CloudMade dibawah lisensi BSD. Cukup ringan, stabil dan cepat jika dibandingkan dengan Openlayers, serta desain kode berbasis OOP yang sangat mudah dipahami. Foursquare adalah salah satu website yang menggunakan Leaflet.</li>
</ul>


<p> Dalam contoh kali ini saya akan menggunakan leaflet sebagai pustaka untuk mengkonsumsi dan menampilkan data tiles dari Osmosa salah satu reimplementasi dari OpenstreetMap. Untuk menampilkan sebuah peta menggunakan leaflet adalah cukup mudah, berikut beberapa baris kode yang perlu ditulis untuk menampilkan sebuah peta dan menampilkan lokasi dimana anda berada.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">L</span><span class="p">.</span><span class="nx">Map</span><span class="p">(</span><span class="s1">&#39;map&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">zoom</span><span class="o">:</span> <span class="mi">10</span><span class="p">});</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">markers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">L</span><span class="p">.</span><span class="nx">LayerGroup</span><span class="p">();</span>
</span><span class='line'> <span class="nx">map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">markers</span><span class="p">);</span>
</span><span class='line'> <span class="c1">// Mengambil tiles dari Osmosa.net</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">tile</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">L</span><span class="p">.</span><span class="nx">TileLayer</span><span class="p">(</span><span class="s1">&#39;http://www.osmosa.net/osm_tiles3/{z}/{x}/{y}.png&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">attribution</span><span class="o">:</span> <span class="s1">&#39;Tiles CC-BY-SA Osmosa, data © OpenStreetMap contributors.&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="nx">maxZoom</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">minZoom</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="nx">map</span><span class="p">.</span><span class="nx">addLayer</span><span class="p">(</span><span class="nx">tile</span><span class="p">);</span>
</span><span class='line'> <span class="c1">// Mengambil posisi user, menampilkan titik dimana user berada</span>
</span><span class='line'> <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">map</span><span class="p">.</span><span class="nx">setView</span><span class="p">(</span><span class="k">new</span> <span class="nx">L</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">),</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'> <span class="kd">var</span> <span class="nx">marker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">L</span><span class="p">.</span><span class="nx">Marker</span><span class="p">([</span><span class="nx">p</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">]);</span>
</span><span class='line'> <span class="nx">marker</span><span class="p">.</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">markers</span><span class="p">).</span><span class="nx">bindPopup</span><span class="p">(</span><span class="s1">&#39;Anda berada di sini!&#39;</span><span class="p">).</span><span class="nx">openPopup</span><span class="p">();</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>Live Demo!</h3>

<p><link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.4.4/leaflet.css"></p>

<!--[if lte IE 8]>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.4.4/leaflet.ie.css" />
<![endif]-->


<script type="text/javascript" src="http://cdn.leafletjs.com/leaflet-0.4.4/leaflet.js"></script>


<div class="well" style="min-height: 200px;" id="map"></div>


<p>Browser anda mungkin akan meminta persetujuan karena contoh kode diatas mencoba melacak lokasi dimana anda berada, ijinkan untuk dapat melihat live demo. Jangan khawatir karena saya tidak akan menyimpan data lokasi atau apapun yang melanggar privasi anda.</p>

<script type="text/javascript">
(function() {
    var map = new L.Map('map', {zoom: 10});
    
    var markers = new L.LayerGroup();
    map.addLayer(markers);
    
//'http://www.osmosa.net/osm_tiles3/{z}/{x}/{y}.png'
    var tile = new L.TileLayer('http://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Tiles CC-BY-SA <a target="_blank" href="http://osmosa.net/">Osmosa</a>, data &copy; <a target="_blank" href="http://openstreetmap.org/">OpenStreetMap</a> contributors.',
        maxZoom: 18, minZoom: 3
    });
    
    map.addLayer(tile);
            
    navigator.geolocation.getCurrentPosition(function(p) {
        map.setView(new L.LatLng(p.coords.latitude, p.coords.longitude), 13);
        var marker = new L.Marker([p.coords.latitude, p.coords.longitude]);
        marker.addTo(markers).bindPopup('Anda berada di sini!').openPopup();
    });
})();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menggunakan Method POST, GET, PUT, DELETE Pada HTML Form Tag, Bisakah?]]></title>
    <link href="http://diian.org/blog/2012/07/27/menggunakan-method-post-get-put-delete-pada-html-form-tag-bisakah/"/>
    <updated>2012-07-27T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/07/27/menggunakan-method-post-get-put-delete-pada-html-form-tag-bisakah</id>
    <content type="html"><![CDATA[<p>Pernahkah anda menggunakan menggunakan http method selain <code>GET</code> dan <code>POST</code> pada browser. Yah, tentunya hanya hanya client seperti apache http client yang mensupport http request method seperti <code>PUT</code>, <code>DELETE</code>, ataupun <code>OPTION</code>. Sebenarnya saat ini hampir seluruh browser sudah dapat mengirimkan request dengan menggunakan http method tersebut melalui <code>XMLHttpRequest</code>, yap kuncinya ada di AJAX. Lalu bagaimana dengan html form tag?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;PUT&quot;</span><span class="nt">&gt;&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sayangnya semua browser hanya mendukung <code>POST</code> dan <code>GET</code> untuk request pada form tag, jadi ilustrasi yang saya tulis diatas tidak dapat diimplementasikan. Lalu? Tunggu dulu, buat anda yang sudah main-main dengan Yama, semuanya bisa jadi mungkin. Saya akan memberikan sedikit contoh bagaimana method selain <code>POST</code> dan <code>GET</code> bisa dikirimkan ke server melalui browser, menggunakan form tag tentunya.</p>

<p>Sebagai pemanasan saya mulai dengan membuat sebuah proyek Yama.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate \
</span><span class='line'> -DarchetypeGroupId=org.meruvian.yama \
</span><span class='line'>-DarchetypeArtifactId=yama-struts-archetype \
</span><span class='line'>-DarchetypeVersion=1.0.2 \
</span><span class='line'>-DgroupId=com.example.yama \
</span><span class='line'>-DartifactId=my-first-yama</span></code></pre></td></tr></table></div></figure>


<p>Oke kemudian saya akan membuat dua buah file jsp dibawah <code>/src/main/webapp/WEB-INF/test</code>, satu untuk mengirim request dan yang satunya lagi untuk menerima hasil request.</p>

<h3>index.jsp</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;delete&quot;</span> <span class="na">action=</span><span class="s">&quot;/test&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Test http method!&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>success.jsp</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Http method : <span class="err">&lt;</span>%= request.getMethod() %&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Kemudian saya buat action class.
 </div></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">yama</span><span class="o">.</span><span class="na">action</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.LogFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.meruvian.inca.struts2.rest.ActionResult</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.meruvian.inca.struts2.rest.annotation.Action</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.meruvian.inca.struts2.rest.annotation.Action.HttpMethod</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Action</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAction</span> <span class="o">{</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">LOG</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">TestAction</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Action</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;/test&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ActionResult</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">ActionResult</span><span class="o">(</span><span class="s">&quot;/WEB-INF/test/index.jsp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Action</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;/test&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ActionResult</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">LOG</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Method delete executed!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">ActionResult</span><span class="o">(</span><span class="s">&quot;/WEB-INF/test/success.jsp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dan yang terakhir saya tambahkan link menu dengan mengedit file <code>menu.ftl</code> pada <code>/src/main/webapp/view</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&lt;@s.url value=&amp;quot;/home&amp;quot; /&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-home icon-white&quot;</span><span class="nt">&gt;&lt;/i&gt;</span> Home
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="err">&lt;</span>#if request.session.getAttribute(&quot;SPRING_SECURITY_CONTEXT&quot;)??&gt;
</span><span class='line'><span class="c">&lt;!-- Menu yang harus ditambahkan --&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#/test&quot;</span><span class="nt">&gt;</span>Test HTTP Method<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="c">&lt;!-- End of menu yang harus ditambahkan --&gt;</span>
</span><span class='line'><span class="nt">&lt;li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&lt;@s.url value=&quot;</span><span class="err">logout&quot;</span> <span class="nt">/&gt;</span>&quot;&gt;<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>@s.text name=&quot;frontent.logout.text&quot; /&gt;
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="c">&lt;!--#if--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya saya akan coba jalankan menggunakan jetty. <code>mvn jetty:run</code></p>

<h3>Request:</h3>

<p><img src="https://lh4.googleusercontent.com/-oUWCUUnNXEA/UBF9YoJg8XI/AAAAAAAAAZw/SVE1iKAX6DI/s800/2.png" alt="Request" /></p>

<h3>Response:</h3>

<p><img src="https://lh4.googleusercontent.com/-iVZgri-Fae8/UBF9YnV0ZhI/AAAAAAAAAZ0/qauYyl7HH2U/s800/1.png" alt="Response" /></p>

<p>Secara teknis Yama menghandle setiap request pada tag form, kemudian mengkonversinya menjadi AJAX request. Jadi kita tidak perlu lagi membuat kode javascript untuk mengirimkan AJAX request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pakai Application Server Yang Mana? (Ala Saya)]]></title>
    <link href="http://diian.org/blog/2012/06/28/pakai-application-server-yang-mana-ala-saya/"/>
    <updated>2012-06-28T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/06/28/pakai-application-server-yang-mana-ala-saya</id>
    <content type="html"><![CDATA[<p>Setelah sekian abad tidak melihat kalender, baru sadar ini umur ternyata dah nambah banyak. Eeeaaaa, tidak terasa sudah dua tahun lebih saya terlibat dari satu projek ke projek, bergelantungan mondar-mandir. Yah tentunya sudah lumayan juga jumlah aplikasi yang telah terdeploy ke berbagai tempat dengan beragam jenis application server. Mulai dari aplikasi yang mengharuskan berjalan diatas JavaEE container hingga stack yang diluar standart JEE seperti Cimande dengan Struts2-Spring-Hibernate yang pastinya bisa jalan di application server manapun (dengan tambahan telaten dan istiqomah untuk beberapa spesifik application server).</p>

<p>Yang akan saya bahas kali ini adalah beberapa pertimbangan (pribadi) tentang bagaimana memilih application server yang tepat untuk digunakan pada fase production. Sebagai permulaan ada 2 jenis kelompok besar dalam aplication server, kelompok pertama adalah full-blown Java EE container, sedangkan kelompompok ke-dua adalah servlet container. Kelompok pertama adalah dihuni oleh app server yang mendukung spesifikasi Java EE seperti EJB, JMS, JSF, dll, beberapa anggota kelompok ini adalah Glassfish, JBoss AS, Weblogic, Websphere, dan masih banyak lagi. Sedangkan kelompok ke-dua adalah app server yang tidak mendukung secara penuh spesifikasi JEE seperti Tomcat dan Jetty. Sudah dapat gambaran tentang dua kelompok besar tersebut? Oke, sekarang saya akan pilah-pilah sesuai dengan kemampuan masing-masih application server.</p>

<h3>Mandat dari client</h3>

<p>Yang satu ini tidak bisa di ganggu gugat, kebanyakan client memang sudah bekerja sama dengan vendor-vendor kesayangan mereka termasuk urusan application server. Jadi bila kondisi seperti ini terjadi maka aplikasi-lah yang akan saya jadikan prioritas utama agar kompatibel dengan spesifik application server. Application server dalam kasus ini biasanya didominasi oleh produk vendor propietary seperti WLS dan WAS.</p>

<h3>Perlukah menggunakan teknologi Java EE?</h3>

<p>Kalau boleh jujur saya punya pengalaman yang kurang baik dengan EJB (J2EE 1.4 waktu itu) yang diimplementasikan dalam aplikasi yang tidak terlalu besar (curhat). Ada yang bilang sih Java EE 6 sudah lebih baik. Pertimbangan selanjutnya adalah spesifikasi JEE yang lain seperti JMS, JSF, atau mungkin ESB, jika memang diperlukan saya akan mengutamakan app server opensource terlebih dahulu, dua favorit saya jatuh pada Glassfish dan JBossAS. Dua container tersebut memiliki komunitas yang cukup besar, tidak jarang saya menemukan penyelesaian suatu masalah cukup dengan mengetik keyword di google, bahkan tanpa perlu bertanya pada mailing list komunitasnya. Glassfish 3 sudah mendukung spesifikasi JEE 6, salah satu yang saya suka adalah fitur admin consolenya yang cukup lengkap, dan juga servlet engine-nya yang konon adalah fork dari Tomcat. JBossAS 7 cukup mengesankan dengan startup-nya yang sangat cepat termasuk admin consolenya yang sudah menggunakan ajax, walaupun menurut saya belum sekeren Glassfish punya. Dulu saya pernah berfikir setiap aplikasi yang bisa jalan di Tomcat pasti bisa di deploy di JEE container manapun, semuanya memang terbukti sebelum akhirnya saya bertemu dengan Weblogic, jadi mungkin tanpa alasan pertama saya sebisa mungkin akan menghindari app server yang satu ini.</p>

<h3>Cukup dengan servlet container?</h3>

<p>Saya jarang ambil pusing bila diharuskan mendeploy aplikasi dibawah platform Cimande ataupun Yama. Ya, pada kenyataannya kedua framework kebanggaan ini bisa berjalan diatas servlet container saja. Beberapa project yang saya kerjakan dideploy diatas Tomcat. Jetty? Jujur saja saya belum pernah mencoba Jetty untuk kebutuhan production, namun untuk kebutuhan servlet container saya rasa Tomcat ataupun Jetty, tidak ada pilihan yang salah diantara kedua produk tersebut.</p>

<h3>Kebutuhan hit tinggi tanpa perlu banyak setting</h3>

<p>Kalau yang satu ini saya belajar banyak dari roller, yap tempat saya posting blog ini yang hampir setahun lalu bermigrasi dengan mulus dari Tomcat6 ke Glassfish3. Setelah migrasi ke Glassfish beberapa problem seperti timeout yang rutin setiap kali terjadi hit tinggi berangsur menghilang. Apakah artinya Tomcat tidak lebih tangguh Glassfish? Tentunya tidak pula, tetapi untuk konfigurasi minim (walaupun naif jika harus membandingkan keduanya) saya lebih memilih aman dengan menggunakan Glassfish.</p>

<p>Seluruh isi dari artikel ini merupakan opini subjektif berdasarkan pengalaman saya, apapun keputusan untuk menggunakan application server manapun dengan suatu alasan tertentu adalah menjadi hak masing-masih individu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengimplementasikan Clean URL Parameter Dengan Inca S2Rest Plugin]]></title>
    <link href="http://diian.org/blog/2012/06/12/mengimplementasikan-clean-url-parameter-dengan-inca-s2rest-plugin/"/>
    <updated>2012-06-12T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/06/12/mengimplementasikan-clean-url-parameter-dengan-inca-s2rest-plugin</id>
    <content type="html"><![CDATA[<p>Sudah pernah baca blog saya sebelumnya tentang <code>Memanfaatkan Struts Action Mapper untuk Membuat Clean URL?</code></p>

<p>Beberapa waktu yang lalu Meruvian melaunching Inca S2Rest Plugin, ya plugin untuk Struts2 dengan fitur utama mengadopsikan arsitektur REST ke dalam Struts2 tentunya. Secara garis besar plugin ini bisa dibilang sebagai fusion-nya Convention Plugin dengan Rest Plugin yang sudah ada sejak dahulu kala, yang jelas dengan implementasi berbeda serta fitur yang jelas lebih banyak, ceile. Seperti harapan yang menjadi kenyataan, setelah beberapa tahun terakhir kita utak-atik action mapper dan kawan-kawannya akhirnya jadilah sebuah plugin untuk mengisi celah fitur yang tidak disertakan pada plugin Struts2 yang lain.</p>

<p>Pada artikel kali ini saya &lsquo;hanya&rsquo; akan membahas salah satu fitur dari Inca yaitu dukungan untuk membuat clean url parameter. Nanti dulu deh, untuk fitur-fitur lain akan saya kupas lebih tajam dalam Developer Blog, terpisah dari blog ini, untuk saat ini bisa main-main dulu ke wikinya.</p>

<p>Ok, kembali ke laptop, Inca S2Rest menyediakan fitur anotasi untuk membuat konfigurasi dapat di-embed ke dalam kode java, sehingga meminimalisir konfigurasi xml yang harus dimaintain oleh developer. Salah satu anotasi yang powerful adalah @ActionParam, anotasi ini berada pada level field untuk menangkap request parameter yang dikirim ke dalam action class, yap no getter and setter anymore. Anotasi ini membantu kita untuk mendapatkan request parameter, lalu bagaimana dengan membuat clean url?</p>

<p>Saya akan membuat sebuah contoh kasus sebuah action untuk menampilkan sebuah artikel berdasarkan tanggal lengkap beserta id dari artikel. Pertama kita tentukan format url yang akan digunakan: <code>/articles/{tahun}/{bulan}/{tanggal}/{id}</code></p>

<p>Saya kutip sedikit dari wiki:</p>

<blockquote><p>By default, the Inca S2RestPlugin use Regex Pattern Matcher for its Pattern Matcher.</p></blockquote>

<p>Sehingga pattern yang sudah saya tulis sebelumnya sudah memenuhi kualifikasi untuk menentukan sebuah action sesuai dengan format url. Waktunya membatik:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Action</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;/article&quot;</span><span class="o">)</span> <span class="c1">// Deklarasi action class</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArticleAction</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@ActionParam</span><span class="o">(</span><span class="s">&quot;th&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">year</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ActionParam</span><span class="o">(</span><span class="s">&quot;bln&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">month</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ActionParam</span><span class="o">(</span><span class="s">&quot;tgl&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ActionParam</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">articleId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Action</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;/{th}/{bln}/{tgl}/{id}&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">showArticle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// lakukan sesuka hati disini</span>
</span><span class='line'>  <span class="c1">// parameter akan dengan deklarasi @ActionParam akan terisi</span>
</span><span class='line'>  <span class="c1">// apabila request url sudah sesuai dengan pattern pada</span>
</span><span class='line'>  <span class="c1">// properti &#39;name&#39; dalam @Action</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Langkah terakhir adalah membuat skenario request dengan url (sebagai contoh): /article/2012/05/04/release-inca-sudirman-thamrin-ditutup-selama-sepekan.</p>

<h3>Menggunakan URL Pattern Matcher Lain</h3>

<p>Walaupun secara default Inca S2Rest menggunakan regex pattern matcher, developer dapat merubah dengan implementasi pattern matcher lain cukup dengan merubah konfigurasi:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;constant</span> <span class="na">name=</span><span class="s">&quot;struts.patternMatcher&quot;</span> <span class="na">value=</span><span class="s">&quot;struts&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Contoh diatas apabila developer menghendaki untuk menggunakan struts (default) pattern matcher, maka contoh kode yang harus digunakan adalah:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Action</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;/article/*/*/*/*&quot;</span><span class="o">,</span> <span class="n">params</span><span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Param</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;th&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;{1}&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nd">@Param</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;bln&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;{2}&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nd">@Param</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;tgl&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;{3}&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nd">@Param</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;{4}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selamat mecoba dan mengimplementasikan Inca S2Rest Plugin pada aplikasi Struts2 anda.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kekuatan Dibalik Proxy Dalam Java]]></title>
    <link href="http://diian.org/blog/2012/04/15/kekuatan-dibalik-proxy-dalam-java/"/>
    <updated>2012-04-15T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/04/15/kekuatan-dibalik-proxy-dalam-java</id>
    <content type="html"><![CDATA[<p>Proxy sudah diperkenalkan sejak java 1.3, salah satu kekuatan (yang tidak tersembunyi) dari java yang sangat berguna dalam pembuatan aplikasi dengan tingkat modularitas tinggi.</p>

<p>Sebelumnya kita ambil contoh dalam kehidupan coding sehari-hari, dengan atau tanpa disadari proxy ada dimana-mana seperti Spring yang mengimplementasikannya untuk AOP, Hibernate untuk lazy loading-nya, dan Google Guice dalam hal dependency Injection.</p>

<p>Dalam Java, dynamic proxy adalah sebuah intance pengganti dari object sesungguhnya. Dengan proxy, pemanggilan sebuah method (method invocation) dapat dicegat (intercepted) sehingga kita dapat memasukkan cutom code sebelum ataupun setelah pemaggilan method. Sangat powerful bukan?</p>

<p>Dalam penggunaannya, diluar dynamic proxy standart yang disediakan oleh JDK, banyak library yang menyediakan fitur proxy dalam penggunaannya, sebagai contoh Spring menyediakan JDK dynamic proxy dan CGLIB proxy bagi user untuk memilih salah satu. Begitu pula Hibernate yang menggunakan CGLIB untuk versi 3.x ke bawah yang kemudian berpindah menggunakan secara penuh Javassisst untuk menangani urusan proxy.
Ada beberapa perbedaan antara JDK dynamic proxy dengan CGLIB serta Javassist, akan saya jelaskan sebagai berikut</p>

<h3>JDK Dynamic Proxy</h3>

<ul>
<li>Proxy dibangun berdasarkan pada runtime interface, dengan kata lain proxy harus memiliki interface untuk dapat diciptakan.</li>
<li>Karena proxy dipaksa untuk menjadi implementasi dari sudatu interface maka sudah dipastikan kita tidak bisa melakukan casting terhadap class lain.</li>
<li>Object menjadi turunan dari <code>java.lang.reflect.Proxy</code></li>
</ul>


<p>Berikut contoh kode sedehananya, sebuah proxy yang akan menghalau setiap method bernama call dengan mengembalikan nilai null apapun nilainya.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DisableEveryCall</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DisableEveryCall</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&quot;call&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Method invoke akan meng-intercept setiap method, dalam kasus ini hanya method dengan nama call yang akan mereturn null dengan apapun kondisinya. Kemudian berikut cara membuat proxy-nya.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Callable</span> <span class="n">callable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Called!&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Proxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Proxy</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">Callable</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Callable</span><span class="o">.</span><span class="na">class</span> <span class="o">},</span> <span class="k">new</span> <span class="n">DisableEveryCall</span><span class="o">(</span><span class="n">callable</span><span class="o">));</span>
</span><span class='line'><span class="n">callable</span> <span class="o">=</span> <span class="o">(</span><span class="n">Callable</span><span class="o">)</span> <span class="n">proxy</span><span class="o">;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">callable</span><span class="o">.</span><span class="na">call</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CGLIB Proxy</h3>

<ul>
<li>Tidak mengharuskan interface.</li>
<li>Proxy dibangun dengan cara mensub-classkan terhadap class sesungguhnya. Hal ini mengindikasikan bahwa class apapun yang digunakan dapat dimungkinkan untuk dijadikan proxy.</li>
<li>CGLIB proxy bersifat final. Maka adalah sebuah hal sia-sia untuk memproxy sebuah proxy karena tidak akan berhasil.</li>
</ul>


<p>Mari membuat contoh yang agak berbeda, ketika kita memanggil method toString proxy akan mengembalikan dengan nilai null bagaimanapun caranya user melakukan override terhadap method tersebut.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DisableToString</span> <span class="kd">implements</span> <span class="n">MethodInterceptor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="n">MethodProxy</span> <span class="n">proxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;toString&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">proxy</span><span class="o">.</span><span class="na">invokeSuper</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pembuatan proxy dapat dilakukan dengan cara berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Enhancer</span> <span class="n">enhancer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Enhancer</span><span class="o">();</span>
</span><span class='line'><span class="n">enhancer</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">enhancer</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">new</span> <span class="n">DisableToString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">Object</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">proxy</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Javassist Proxy</h3>

<p>Tidak banyak perbedaan antara Javassist dengan CGLIB proxy, penjelasan tersebut dapat langsung saya ambil dari dokumentasi source-nya.</p>

<blockquote><p>Package <code>javassist.util.proxy</code>
Dynamic proxy (similar to Enhancer of cglib).</p></blockquote>

<p>Perbedaan paling utama adalah kita tidak dapat menambahkan sebuah method baru kedalam Javassist proxy, sedangkan hal tersebut dimungkinkan pada CGLIB proxy. Serta fitur utama dari Javassist sendiri adalah bytecode manipulation library yang lebih mengedepankan manipulasi class pada saat compile-time bahkan mendefinisikan class baru pada saat run-time daripada memproxynya, sangat powerful dalam sisi lain tapi tidak dengan fitur proxy-nya. Berikut beberapa hal dalam Javassist proxy:</p>

<ul>
<li>Lebih lambat dari CGLIB proxy maupun JDK proxy (untuk saat ini)</li>
</ul>


<p>Agar mudah saya akan membuat contoh dengan pendekatan yang tidak jauh berbeda.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DisableToString</span> <span class="kd">implements</span> <span class="n">MethodHandler</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">self</span><span class="o">,</span> <span class="n">Method</span> <span class="n">thisMethod</span><span class="o">,</span> <span class="n">Method</span> <span class="n">proceed</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Langkah pembuatan proxy-nya pun hampir sama</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProxyFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProxyFactory</span><span class="o">();</span>
</span><span class='line'><span class="n">factory</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">factory</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="n">MethodFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isHandled</span><span class="o">(</span><span class="n">Method</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;toString&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">Proxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">javassist</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">proxy</span><span class="o">.</span><span class="na">Proxy</span><span class="o">)</span> <span class="n">factory</span><span class="o">.</span><span class="na">createClass</span><span class="o">().</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'><span class="n">proxy</span><span class="o">.</span><span class="na">setHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">DisableToString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="n">proxy</span><span class="o">;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kesimpulan</h2>

<p>Java memiliki banyak fitur menarik, salah satunya adalah dynamic proxy. Spring transaction manager dan Hibernate lazy loading mungkin adalah contoh yang paling mudah untuk memahami bagaimana proxy bekerja untuk meng-intercept sebuah method. Banyak pula library pembantu di luar sana yang menyediakan fitur proxy dengan berbagai keunggulan masing-masing.</p>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geliat Cloud 2012, Tahunnya PaaS?]]></title>
    <link href="http://diian.org/blog/2012/02/11/geliat-cloud-2012-tahunnya-paas/"/>
    <updated>2012-02-11T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/02/11/geliat-cloud-2012-tahunnya-paas</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-ar9VGb8Qb9g/TzVrRIW6EsI/AAAAAAAAAXk/FFw5RKh-NGE/s800/cumulonimbus.jpg" title="Cloud" width="300" /></p>

<p>Bicara soal 2012 kembali kita dihadapkan pada topik paling hot di dunia, pasti gak akan jauh-jauh dari isu akhir dari peradaban manusia. Yah, mungkin saya akan berkata hal serupa juga andaikan saat ini saya adalah pengguna smarphone nokia, hehehe&hellip; Lupakan.</p>

<p>Kembali kita tarik mundur ke tahun lalu, tahun 2011 yang menurut saya jaman dimana meledaknya barang bernama Cloud. Sebuah infrastruktur/perangkat/informasi/servis/awan/-kabut/petir atau apalah namanya yang sulit dimengerti&hellip; Menjadi alasan yang saya anggap cukup kuat, kita tahu dengan populernya facebook, twitter, google, amazon youtube, dan masih banyak lagi web yang memposisikan dirinya sebagai Software as a Service (SaaS), yang secara tidak sadar telah membawa kita ke jaman sentralisasi data. Walauppun sulit untuk dijelaskan, kita dapat dengan mudah menyebut bahwa web-web tersebut adalah cloud.</p>

<p>Lanjut ke topik utama bahasan, PaaS, ya Platform as a Service, nama dan istilahnya masih nyambung-nyambung dengan SaaS, dan tahun 2012 sepertinya adalah tahunnya PaaS. Mengapa begitu, indikasi paling nyata adalah dengan mulai menjamurnya penyedia layanan cloud seperti Amazon dengan EC2, Google dengan Google App Engine (GAE) dan google eclipse plugin-nya, RedHat dengan Openshift, VMWare dengan Cloudfoundry yang didukung dengan Springsource Tool Suite untuk mempermudah development dan proses deploy, tidak ketinggalan ada Jelastic yang dapat melakukan checkout source code dan secara otomatis mengcompile diudara, dan masih banyak lagi. Dan kabar baiknya sebagian besar yang saya sebutkan diatas rata-rata masih bersifat gratis, maka nikmatilah sebelum masa itu berakhir (yang pasti akan terjadi).</p>

<p>Tidak dapat dipungkiri bahwa ini adalah trend, dan developer telah dihadapkan ke posisi yang lebih menyenangkan, menjauh dari model tradisional. Para pengembang aplikasi dapat lebih terfokus terhadap fungsionalitas dan dan kualitas aplikasi ketimbang memikirkan masalah struktur dibawahnya. Begitupun dengan penyedia layanan juga mendapatkan keuntungan dengan berfokus pada penyediaan dan pengelolaan terhadap suberdaya dan infrastrukturnya, kemudian menyediakannya sebagai produk PaaS yang diinginkan oleh user. Sama-sama untung bukan?</p>

<p>Dunia cloud semakin membesar, dan 2012 adalah tahunnya, yang membawa developer terbang jauh ke awan, pilihan kita hanya ikut serta, mendahului, atau tertinggal. Dengan dunia IT yang kecepatan lajunya sudah sangat kencang, mau kemana?</p>

<p><img src="https://lh5.googleusercontent.com/-1bPegkYH5Bs/TzZXPU9hdUI/AAAAAAAAAX4/P-WurIvPEb8/s144/google-app-engine.jpg" />
<img src="https://lh6.googleusercontent.com/-cYd7JASkxFI/TzZXQm39q_I/AAAAAAAAAYA/kuTlM9oo2I0/s144/jelastic.jpg" />
<img src="https://lh3.googleusercontent.com/-2ATs6H00HzE/TzZXOP5M4mI/AAAAAAAAAXw/PfwB09msk_o/s144/OpenShift.jpg" />
<img src="https://lh4.googleusercontent.com/-H30ELfSm0Xk/TzZXPJSxbWI/AAAAAAAAAX8/zery9S5F9Qk/s144/VMW-LGO-CloudFoundry-217-square-300x300.png" />
<img src="https://lh3.googleusercontent.com/-X5Xg7xmXobI/TzZXvQGfCKI/AAAAAAAAAYQ/wP7XE97qTTI/s144/AWS_LOGO_RGB_300px.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yang Sering Dilakukan Siswa Dan Yang Sering Diabaikan Oleh Pembimbing Dalam Tugas Akhir]]></title>
    <link href="http://diian.org/blog/2012/01/16/yang-sering-dilakukan-siswa-dan-yang-sering-diabaikan-oleh-pembimbing-dalam-tugas-akhir/"/>
    <updated>2012-01-16T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2012/01/16/yang-sering-dilakukan-siswa-dan-yang-sering-diabaikan-oleh-pembimbing-dalam-tugas-akhir</id>
    <content type="html"><![CDATA[<p>Akhir Desember lalu saya berkesempatan untuk menjadi penguji eksternal (dari pihak industri) mewakili Meruvian di salah satu SMK swasta top di Kota Malang. Sangat istimewa karena kampung halaman saya berada di Kota Batu yang berdempetan dengan Malang, berasa seperti tiket mudik gratis dimana malamnya saya bisa ketemu teman-teman lama sambil ngopi bareng di pinggiran Jl. Diponegoro, bertemu hawa dingin dan pemandangan gunung di kiri kanan yang asri. #eaaa berasa makin lebay dan gak nyambung dengan judul.</p>

<p>Yap, setelah 2 hari mejeng di depan para siswa sebagai killer, disisi lain banyak diskusi menarik dengan para guru di setiap jeda dan seusai ujian mengenai kompetensi para siswa didiknya. Banyak point yang akhirnya disinggung, terutama masalah standart penyajian aplikasi seperti presentasi, pembuatan flow, DFD, ERD, laporan harcopy yang segepok dan banyak lagi hal-hal yang berbau teoritis yang menariknya belum pernah diajarkan sebelumnya kepada siswa, atau boleh juga dieja &lsquo;sudah diajarkan tapi sedikit&rsquo;, dimana point-point tersebut ada dalam lembar penilaian. Berbau menghakimi memang, yah tapi itu kenyataannya, dan saya yakin hal ini terjadi hampir di seluruh SMK (opini subjektif).</p>

<p>Maka dari itu sebagai rekanan industri yang baik #ceile disini saya akan membeberkan beberapa hal yang sering dilakukan siswa dalam&nbsp;tugas akhir yang menjadi point penilaian penguji yang sering luput dari bagian pengarahan pembimbing. Semoga dapat menjadi referensi untuk siswa SMK yang akan menghadapi tugas akhir agar tidak melakukan hal-hal di berikut.</p>

<p>Presentasi
Software: Siswa selalu update, jaman semakin berkembang, tidak salah kalau presentasi harus pakai barang canggih. Maka dipakailah software yang bernama MS Office dengan versi keluaran minimal tahun 2007 (yang kita semua tahu sebagian bersar pasti bajakan).</p>

<p>Estetika: Banyak gambar-gambar bertebaran di slide yang akhirnya berkesan kurang profesional. Ada yang full manga, ada yang suka warna biru sampai semua tulisan dikasih biru dengan backgroundnya laut (mana kelihatan), yang ngefans ayu tingting juga gak mau kalah gitu juga, gak lah.</p>

<p>ERD: Sebagian besar menggunakan entity-relationship model</p>

<p>sebagian kecil lainnya menggunakan object-relational model</p>

<p>Saya juga baru tahu kalau ERD ada macam-macam modelnya :) tetapi object-relational model yang paling lazim digunakan dalam pembuatan aplikasi, ini yang bikin heran kenapa sebagian besar pakai entity-relational model.</p>

<p>Detail teknologi: hampir semua hanya menulis, &ldquo;Java Web + MySql&rdquo;, &ldquo;PHP&rdquo;, atau &ldquo;Java Web + XAMPP&rdquo; (gak paham yang ini), tanpa dijelaskan secara detail pustaka apa saja yang digunakan, padahal untuk java pasti buanyak pustaka yang dicomot.</p>

<h3>Pembatasan Kasus</h3>

<p>Ini yang paling suka saya bahas, pengalaman saya juga sebagai siswa biasanya minim ide. Banyak ide yang dibuat seolah berbeda padahal isinya sama, seperti Aplikasi Toko, ada yang membuat Toko Bola online, Toko Musik onlie, dan toko-toko yang lainnya. Disinilah &lsquo;seharusnya&rsquo; peran pembimbing untuk mengarahkan siswa dalam hal kreatifitas yang sering luput.</p>

<p>Ketuntasan aplikasi: ada cerita menarik ketika saya berhadapan dengan siswa yang membuat sebuah aplikasi pemesanan lapangan futsal online.</p>

<blockquote><p>Siswa : (sambil mendemokan aplikasi) &ldquo;Berikut ini adalah form pemesanan. User yang akan menyewa lapangan harus mengisi form disini.&rdquo;</p>

<p>Penguji : &ldquo;Tidak ada register/login? Jadi orang tidak dikenal bisa langsung pesan?&rdquo;</p>

<p>Siswa : &ldquo;Mmmm, iya.&rdquo;</p>

<p>Penguji : &ldquo;Oke silakan dilanjutkan.&rdquo;</p>

<p>Siswa : (Masuk halaman admin) &ldquo;Kemudian orang yang pesan tadi datanya masuk ke halaman admin.&rdquo;</p>

<p>Penguji : &ldquo;Kalau ada orang yang mau pesan di jam yang sama?&rdquo;</p>

<p>Siswa : &ldquo;Tidak bisa.&rdquo;</p>

<p>Penguji : &ldquo;Untuk pembayarannya bagaimana?&rdquo;</p>

<p>Siswa : &ldquo;Ya&hellip; dibayar di tempat.&rdquo;</p>

<p>Penguji : &ldquo;Kalau yang pesan tidak hadir di hari H?&rdquo;</p>

<p>Siswa : (hening)</p>

<p>Penguji : &ldquo;Kalau yang pesan gitu semua gimana hayo?&rdquo;</p>

<p>Siswa : (hening)</p>

<p>Penguji : (pasang muka baik) &ldquo;Kan seharusnya ada konfirmasi pembayaran, biar gak bangkrut usahanya.&rdquo;</p>

<p>Siswa : (meringis)</p>

<p>Penguji : &ldquo;Jadi aplikasi kamu gak tuntas dong, mmm dikasih nilai berapa yah&hellip;&rdquo;</p>

<p>Siswa : (mewek)</p></blockquote>

<p>Sedikit percakapan diatas bisa menjadi sedikit gambaran bagaimana membuat aplikasi seharusnya tuntas, yah lagi-lagi peran pembimbing untuk melakukan check terhadap aplikasi siswa sebelum datang hari akhir (tugas akhir maksudnya).</p>

<p>Untuk sementara itu saja pengamatan saya tentang pelaksanaan tugas akhir kemarin, inti dari permasalahan yang saya angkat sebetulnya adalah kritikan untuk pembimbing sekolah yang terkadang (mohon maaf) kurang kejam untuk masalah lolos-meloloskan laporan akhir siswa, sehingga siswa seolah menjadi objek penyiksaan penguji eksternal, yang padahal memang sebetulnya aplikasinya belum layak untuk dijadikan tugas akhir. Tetapi terkadang malah diloloskan dengan alasan kasih sayang yang tanpa pandang bulu (opini subjektif). Masih banyak curahat yang belum sempat tersampaikan, mungkin lain kali bakal lebih panjang lagi bahasannya.</p>

<p>Semoga SMK makin maju. Salam &ldquo;SMK Sakti Mandraguna, gak cuma bisa-bisaan&hellip;&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criteria Query, Hibernate Dan JPA 2.0 (JPA2 Part 1)]]></title>
    <link href="http://diian.org/blog/2011/11/12/criteria-query-hibernate-dan-jpa-2-0-jpa2-part-1/"/>
    <updated>2011-11-12T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2011/11/12/criteria-query-hibernate-dan-jpa-2-0-jpa2-part-1</id>
    <content type="html"><![CDATA[<p>Salah satu tambahan terbesar dari spesifikasi JPA (Java Persistence API) versi 2.0 adalah criteria query. Dirilis pada Desember 2009, JPA 2.0 menyediakan API baru yang memungkinkan penggunaan criteria query, meskipun kita tahu pada framework ORM seperti Hibernate sudah terlebih dahulu menyediakan criteria query sejak versi 3.0. Hmm, bagaimanapun JPA adalah spesifikasi standard untuk Persistence yang mana dengan JPA kita bisa memilih JPA provider seperti Hibernate, EclipseLink, OpenJPA, DataNucleus, ataupun ObjectDB sesuka hati tanpa perlu mengganti banyak konfigurasi karena seluruh abstraksi ada di bawah package javax.persistence.*</p>

<p>Pada postingan kali ini saya akan mengulas tentang penggunaan Criteria Query pada JPA (dengan Hibernate sebagai persistence provider) dan Qriteria Query pada Hibernate (native).</p>

<p>Sedikit berbeda dengan JPA 1.0, walaupun diklaim sebagai vendor-independent, kita tidak akan menemukan javax.persistence:javax.persistence:2.0 pada Maven Central, melainkan kita harus mencarinya pada masing-masing ORM vendor. Sebagai contoh jika kita menggunakan hibernate maka artifact untuk JPA 2.0 adalah</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupid&gt;</span>org.hibernate.javax.persistence<span class="nt">&lt;/groupid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactid&gt;</span>hibernate-jpa-2.0-api<span class="nt">&lt;/artifactid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.0.Final<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;type&gt;</span>jar<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oke marilah langsung saja kita menuju ke area perangnya, dimisalkan saya memiliki sebuah entity (karyawan).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;pegawai&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pegawai</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">telepon</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">alamat</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">// getter dan setter</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya mari membuat sebuah JPA Query untuk menangani sebuah pencarian berdasarkan nama atau alamat pegawai.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT p FROM Pegawai WHERE p.nama LIKE :nama OR p.alamat LIKE :alamat</span></code></pre></td></tr></table></div></figure>


<h2>Criteria Query</h2>

<h3>Hibernate</h3>

<p>Citeria query pada hibernate umunya cukup mudah, kita tinggal mendefinisikan class entity pada saat pembuatan criteria, kemudian memasukkan masing-masing ekspresi menggunakan class <code>org.hibernate.Criterion</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">pegawai</span><span class="o">&gt;</span> <span class="nf">getKaryawanByCriteriaH</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">String</span> <span class="n">alamat</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">(</span><span class="n">Pegawai</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">criteria</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Restrictions</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="s">&quot;nama&quot;</span><span class="o">,</span> <span class="n">nama</span><span class="o">));</span>
</span><span class='line'>  <span class="n">criteria</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Restrictions</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="s">&quot;alamat&quot;</span><span class="o">,</span> <span class="n">alamat</span><span class="o">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">criteria</span><span class="o">.</span><span class="na">list</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JPA</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Pegawai</span><span class="o">&gt;</span> <span class="nf">getKaryawanByCriteria</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">String</span> <span class="n">alamat</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">CriteriaBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">getCriteriaBuilder</span><span class="o">();</span>
</span><span class='line'>  <span class="n">CriteriaQuery</span><span class="o">&lt;</span><span class="n">Pegawai</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">Pegawai</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Root</span> <span class="o">&lt;</span><span class="n">Pegawai</span><span class="o">&gt;</span> <span class="n">root</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Pegawai</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">query</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">root</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;nama&quot;</span><span class="o">),</span> <span class="n">nama</span><span class="o">),</span> <span class="n">builder</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">root</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;alamat&quot;</span><span class="o">),</span> <span class="n">alamat</span><span class="o">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">query</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sekilas tidak jauh berbeda citeria query pada Hibernate dengan JPA, akan tetapi sedikit yang terlihat jelas spesifikasi JPA sedikit lebih kompleks (baca: njelimet) dibandingkan criteria query pada Hibernate.</p>

<h3>JPA Metamodel</h3>

<p>Criteria Query pada JPA berbasiskan metamodel dari class yang telah terdaftar pada Persistence Unit. JPA 2 mendefinisikan typesafe Criteria API baru yang mengizinkan criteria query dibangun secara rapi/kuat. Penggunaan meta model pada JPA dan beberapa metode otomasi pembuatannya akan saya bahas pada postingan selanjutnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Cimande Pada Weblogic 10.3]]></title>
    <link href="http://diian.org/blog/2011/11/08/deploy-cimande-pada-weblogic-10-3/"/>
    <updated>2011-11-08T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2011/11/08/deploy-cimande-pada-weblogic-10-3</id>
    <content type="html"><![CDATA[<p>Baru hangat-hangat nih, berbarengan dengan Release Blueoxygen Cimande versi 2.0, ada request untuk menjalankannya pada Weblogic Middleware versi 10.3. Semula saya pikir gak akan jauh beda dengan server-server enterprise lain yang pernah saya coba seperti Glassfish (saja). Dengan bermodal pede (tempe kedele) saya coba jalankan dengan menggunakan Cargo Maven Plugin dengan menambahkan konfigurasi seperti ini:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupid&gt;</span>org.codehaus.cargo<span class="nt">&lt;/groupid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactid&gt;</span>cargo-maven2-plugin<span class="nt">&lt;/artifactid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.1.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;container&gt;</span>
</span><span class='line'>      <span class="nt">&lt;containerid&gt;</span>weblogic103x<span class="nt">&lt;/containerid&gt;</span>
</span><span class='line'>      <span class="nt">&lt;home&gt;</span>/home/dian/Oracle/Middleware/wlserver_10.3/<span class="nt">&lt;/home&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/container&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cargo.protocol&gt;</span>http<span class="nt">&lt;/cargo.protocol&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cargo.hostname&gt;</span>localhost<span class="nt">&lt;/cargo.hostname&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cargo.servlet.port&gt;</span>7001<span class="nt">&lt;/cargo.servlet.port&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cargo.weblogic.administrator.user&gt;</span>default<span class="nt">&lt;/cargo.weblogic.administrator.user&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cargo.weblogic.administrator.password&gt;</span>guecakep<span class="nt">&lt;/cargo.weblogic.administrator.password&gt;</span>
</span><span class='line'>    <span class="nt">&lt;context&gt;</span>cimande<span class="nt">&lt;/context&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dan benar ketika saya jalankan dengan perintah clean verify cargo:run, mantra yang tidak diharapkan muncul</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Caused By: java.lang.ClassNotFoundException: org.apache.struts2.views.JspSupportServlet
</span><span class='line'>   at weblogic.utils.classloaders.GenericClassLoader.findLocalClass(GenericClassLoader.java:297)
</span><span class='line'>   at weblogic.utils.classloaders.GenericClassLoader.findClass(GenericClassLoader.java:270)
</span><span class='line'>   at weblogic.utils.classloaders.ChangeAwareClassLoader.findClass(ChangeAwareClassLoader.java:64)
</span><span class='line'>   at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
</span><span class='line'>   at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
</span><span class='line'>   at weblogic.utils.classloaders.GenericClassLoader.loadClass(GenericClassLoader.java:179)
</span><span class='line'>   ...</span></code></pre></td></tr></table></div></figure>


<p>Yap, class yang diinginkan tidak ditemukan, dan ajaibnya seluruh library yang dibutuhkan (termasuk struts2-core-2.x.jar dimana terdapat class (org.apache.struts2.views.JspSupportServlet) sudah ada di folder webapp library (WEB-INF/lib) di dalam WAR yang telah dicompile. Googling punya googling ada sedikit pencerahan, dimana seluruh library yang dibutuhkan oleh webapp harus diletakkan di root EAR project. Ya benar, agak aneh, ada pemaksaan untuk menjadikan project saya menjadi enterprise archive, walaupun didalamnya tidak ada EJB-nya. Sehingga untuk struktur maven-nya pun berubah menjadi seperti ini.</p>

<p>Ada satu parent project yang memiliki 2 module yaitu berupa webapp (dengan packaging WAR) dan ear (dengan packaging EAR).</p>

<p>Karena semua library akan diletakkan pada EAR maka untuk menghindari duplikasi file jar, maka ada sedikit perubahan scope cimande-core pada webapp dari compile menjadi provided, artinya library tidak akan ikut disertakan ketika webapp di package menjadi WAR.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupid&gt;</span>org.blueoxygen.cimande<span class="nt">&lt;/groupid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactid&gt;</span>cimande-core<span class="nt">&lt;/artifactid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>${cimande.sdk.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Berikut isi dari konfigurasi pom.xml pada parent project</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.blueoxygen.cimande<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>cimande-enterprise-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Cimande Enterprise Parent<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>        <span class="nt">&lt;cimande.sdk.version&gt;</span>2.0<span class="nt">&lt;/cimande.sdk.version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modules&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module&gt;</span>ear<span class="nt">&lt;/module&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module&gt;</span>webapp<span class="nt">&lt;/module&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/modules&gt;</span>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;pluginManagement&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>                <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;artifactId&gt;</span>maven-site-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;unzipCommand&gt;</span>/usr/bin/unzip -o &gt; err.txt<span class="nt">&lt;/unzipCommand&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/pluginManagement&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.blueoxygen.cimande<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>cimande-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>${cimande.sdk.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Dan Cargo Maven Plugin untuk menjalankan Weblogic saya letakkan pada pom.xml module ear, untuk mendeploy aplikasi dalam bentuk EAR.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.blueoxygen.cimande<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>cimande-enterprise<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>ear<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Cimande Enterprise<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;parent&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.blueoxygen.cimande<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>cimande-enterprise-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.blueoxygen.cimande<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>cimande-webapp<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;type&gt;</span>war<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-ear-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;generateApplicationXml&gt;</span>true<span class="nt">&lt;/generateApplicationXml&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;defaultLibBundleDir&gt;</span>lib/<span class="nt">&lt;/defaultLibBundleDir&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;archive&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;addClasspath&gt;</span>true<span class="nt">&lt;/addClasspath&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/manifest&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/archive&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.codehaus.cargo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>cargo-maven2-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>1.1.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;container&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;containerId&gt;</span>weblogic103x<span class="nt">&lt;/containerId&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;home&gt;</span>/home/dian/Oracle/Middleware/wlserver_10.3/<span class="nt">&lt;/home&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/container&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;cargo.protocol&gt;</span>http<span class="nt">&lt;/cargo.protocol&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;cargo.hostname&gt;</span>localhost<span class="nt">&lt;/cargo.hostname&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;cargo.servlet.port&gt;</span>7001<span class="nt">&lt;/cargo.servlet.port&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;cargo.weblogic.administrator.user&gt;</span>default<span class="nt">&lt;/cargo.weblogic.administrator.user&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;cargo.weblogic.administrator.password&gt;</span>tulalit13<span class="nt">&lt;/cargo.weblogic.administrator.password&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;context&gt;</span>cimande<span class="nt">&lt;/context&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>        <span class="nt">&lt;cimande.sdk.version&gt;</span>2.0<span class="nt">&lt;/cimande.sdk.version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tak lupa yang terakhir (juga hasil googling) buat file weblogic-application.xml pada direktori {ear.home}/src/main/application/META-INF/, yang merupakan file deployment descriptor spesifik Weblogic server untuk application.xml dari Sun Microsystem. Dalam file ini konfigurasi yang dibutuhkan seperti shared library dideskripsikan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?--&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;weblogic-application</span>
</span><span class='line'>    <span class="na">xmlns=</span><span class="s">&quot;http://www.bea.com/ns/weblogic/weblogic-application&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;application-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>webapp.encoding.default<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/application-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;prefer-application-packages&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>antlr.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>javax.persistence.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>org.apache.commons.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>org.springframework.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;package-name&gt;</span>org.hibernate.*<span class="nt">&lt;/package-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/prefer-application-packages&gt;</span>
</span><span class='line'><span class="nt">&lt;/weblogic-application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dan akhirnya setelah semua mantra yang dituliskan diatas dijalankan satu per satu secara berurutan, maka tibalah saat-saat yang mendebarkan yaitu menjalankan aplikasi. Berikut langkah-langkah untuk menjalankannya.</p>

<ul>
<li>Masuk ke dalam direktori parent-project, kemudian masukkan perintah <code>mvn clean install</code> untuk menginstal ear dan webapp pada repository lokal.</li>
<li>Masuk ke dalam direktori ear kemudian jalankan perintah <code>mvn cargo:run</code></li>
<li>Muka browser, pada contoh konfigurasi diatas Cimande dapat diakses melalui <a href="http://localhost:7001/cimande-webapp">http://localhost:7001/cimande-webapp</a></li>
</ul>


<p>Dan akhirnya dengan modal pede + googling saya berhasil menjalankan BlueOxygen Cimande pada Weblogic Server.</p>

<p>NB: mengingat konfigurasi diatas cukup rumit, tim developer saat ini sedang mempersiapkan Maven archetype untuk mempermudah user mengembangkan Cimande project diatas Weblogic dengan cukup menggenerate archetype yang akan segera tersedia di maven central.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menginstall Maven 3 Pada Ubuntu]]></title>
    <link href="http://diian.org/blog/2011/10/07/menginstall-maven-3-pada-ubuntu/"/>
    <updated>2011-10-07T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2011/10/07/menginstall-maven-3-pada-ubuntu</id>
    <content type="html"><![CDATA[<p>Sekedar mengembalikan postingan yang sempat hilang ditelan bumi :D
 Posted on August 03, 2011 by Dian Aditya
 Hari ini saya telah berhasil mengupgrade versi Maven pada ubuntu 10.04 saya dari versi 2.x ke versi 3.x. Berbeda dengan versi sebelumnya, Maven 3 tidak tersedia pada paket update Ubuntu, sehingga cara instalasinya berbeda pula dengan Maven 2.
 Ilustrasi</p>

<pre>$sudo apt-get install maven3</pre>


<p> Mungkin akan terasa nikmat jika perintah diatas berjalan dengan mulus :D
 Ok, saya rasa semuanya sudah mengerti. Berikut proses instalasi Maven 3 pada Ubuntu secara manual. Sebelumnya pastikan java telah terinstal terlebih dahulu.</p>

<ol>
 <li>Download paket Maven 3 <a href="%0Ahttp://apache.the.net.id//maven/binaries/apache-maven-3.0.3-bin.tar.gz" title="Maven 3">di sini.</a> Kemudian extract paket yang sudah didownload. <br>
Pada kasus ini paket saya extract pada <code>/opt</code></li>
 <pre>$tar -xzvf apache-maven-3.0.3-bin.tar.gz</pre>
 <li>Tambahkan PATH variable pada environtment file. </li>
 <pre>$sudo gedit /etc/environment</pre>
 <pre>
JAVA_HOME="/opt/jdk1.6.0_21"
M3_HOME="/opt/apache-maven-3.0.3"
MAVEN_HOME="/opt/apache-maven-3.0.3"
M3="/opt/apache-maven-3.0.3/bin"
</pre>
 <li>Rubah PATH, biasanya seperti ini</li>
 <pre>PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games"</pre>
 Menjadi seperti berikut
 <pre>PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/apache-maven-3.0.3/bin"</pre>
 <li>Logout</li>
</ol>


<p> Setelah proses diata selesai, login kembali, kemudian lakukan cek versi maven.</p>

<pre>$mvn -version</pre>


<p> jika berhasil seharusnya konsol mengembalikan hasil seperti berikut</p>

<pre>
Apache Maven 3.0.3 (r1075438; 2011-03-01 00:31:09+0700)
Maven home: /opt/apache-maven-3.0.3
Java version: 1.6.0_21, vendor: Sun Microsystems Inc.
Java home: /opt/jdk1.6.0_21/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "2.6.32-33-generic", arch: "i386", family: "unix"
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cimande 2.0-RC2 Release]]></title>
    <link href="http://diian.org/blog/2011/07/14/cimande-2-0-rc2-release/"/>
    <updated>2011-07-14T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2011/07/14/cimande-2-0-rc2-release</id>
    <content type="html"><![CDATA[<p>Hampir tidak terasa sudah satu tahun sejak rencana major release BlueOxygen Workspace (Cimande) versi 2.0 dicetuskan dengan mengusung konsep Representational State Transfer (ReST). Diawali dengan lahirnya versi Release Candidate 1 (RC1) akhir tahun lalu, yang juga merupakan awal dari dimulainya mobilisasi terhadap beberapa produk BlueOxygen yang secara keseluruhan berjalan diatas platform Cimande. Dengan dukungan multiple representational yang masih dan terus disempurnakan hingga saat ini diharapkan dalam major release mendatang Blueoxygen Workspace benar-benar menjadi platform yang ramah akan perangkat mobile, baik itu mobile web maupun native (Android, iPhone, Blackberry, dll).
Prototype Cimande versi tablet dengan jQuery Mobile SplitView
Berbeda dengan versi sebelumnya, banyak hal spesial yang terjadi dalam pengembangan RC2 ini yang membuat waktu release sempat mundur dari jadwal yang sudah direncanakan. Sedikit bocoran, banyak diantaranya yang belum dituliskan pada roadmap dan tiba-tiba ada pada RC2 ini. Secara teknis, berikut beberapa perubahan dan fitur terbaru yang telah ditambahkan :
Full ajax support
Dengan dukungan ajax secara penuh, semua proses request dan response telah ditangani pada background sehingga membuat aplikasi berjalan lebih cepat. Modul-modul yang berjalan diatas Cimande Platform juga secara otomatis akan terintegrasi dengan fitur ajax ini sehingga aplikasi yang sudah berjalan sebelumnya tidak perlu ditulis ulang untuk menyesuaikan dengan versi Cimande ini. Penggunaan http method diluar POST dan GET dalam tag
<form>
 seperti PUT, HEAD, DELETE juga dimunggkinkan dengan ketentuan browser mendukung XMLHttpRequest.
</form>
Layout dan tema baru
Setelah hampir satu dekade setia dengan tema lama, dalam rangkaian major release ini Cimande v2 telah berganti kulit dengan tema berlatar biru tua, warna khas BlueOxygen, serta dengan logo Blueoxygen terbaru.
Maven Build Tool &amp; Archetype
Yang paling menarik dari versi 2 ini adalah perubahan build tool yang selama ini menggunakan Ant menjadi Maven dengan plugin dan dependency managementnya yang sangat powerfull. Hal ini sedikit banyak juga telah membuang kesan Cimande yang kurang akur dengan IDE selain Eclipse. Sehingga developer yang akan mengembangkan aplikasi dia atas Platform Cimande dapat memilih menggunakan IDE sesuai dengan selera yang dikehendaki. Saat ini Cimande telah di-host di java.net, dengan Nexus yang telah termirror dengan Maven Central membuat para pengembang cukup menggenerate archetype untuk membuat sebuah workspace yang siap pakai. Langkah untuk melakukan generate archetype berada pada artikel berikut.
Hingga saat ini tim pengembang masih terus melakukan optimasi untuk relesase berikutnya.
Hal yang tak pernah lupa untuk disebutkan, BlueOxygen Cimande merupakan produk OpenSource dibawah Lisensi Apache. Seluruh source code berada pada cimande.java.net.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Classpath Resource, Beda Middleware Beda Konfigurasi (Tomcat vs Glassfish)]]></title>
    <link href="http://diian.org/blog/2011/06/13/spring-classpath-resource-beda-middleware-beda-konfigurasi-tomcat-vs-glassfish/"/>
    <updated>2011-06-13T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2011/06/13/spring-classpath-resource-beda-middleware-beda-konfigurasi-tomcat-vs-glassfish</id>
    <content type="html"><![CDATA[<p>Dua hari pusing mikirin session factory dari hibernate.cfg.xml yang gak kebaca di konfigurasi spring. Yap, baru-baru ini saya lagi sibuk jalanin cimande v2 di glassfish (yang alhamdulillah baru jalan lancar setelah dua hari). Ya memang kedengarannya payah, tapi mungkin bisa jadi ada juga yang memiliki nasib mirip seperti saya. Berawal dari kisah buruk itulah dengan hati tulus ikhlas saya berusaha agar teman-teman yang lain tidak mengalami kejadian yang mirip seperti yang saya alami tersebut.
Jadi begini awal mula ceritanya, dari mulai kenal cimande sampai saya gede seperti ini belum pernah sekalipun saya coba jalanin ini aplikasi di container selain tomcat (sekarang sudah :D). Kemudian suatu hari muncullah titah dari Pak Bos untuk menjalankan cimande yang terdiri dari komposisi Struts2 + Spring + Hibernate di app server yang bernama Glassfish. 1, 2, 3, beberapa saat lancar-lancar aja (sampai muncul halaman login :P) dan akhirnya hal itupun terjadi. Masalah sederhana, gak mau login. Usut punya usut ternyata database tidak mengembalikan nilai yang diminta oleh client, usut punya usut lagi ternyata hibernate session factory yang diinject oleh spring bernilai kosong alias hibernate.cfg seakan tidak pernah dilahirkan. Anehnya di tomcat lancar-lancar saja, ya saya sadar kalo masalah beginian pasti saya yang salah.
Berikut konfigurasi saya sebelumnya</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;bean</span><span style=" color:#000000; background-color:#fbfbfb;"> id=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"sessionFactory"</span><span style=" color:#000000; background-color:#fbfbfb;">
    class=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"</span><span style=" color:#000000; background-color:#fbfbfb;">
    p:dataSource-ref=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"dataSource"</span><span style=" color:#000000; background-color:#fbfbfb;">
    p:hibernateProperties=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"</span><span style=" color:#2a00ff; background-color:#fbfbfb;"><strong><u>classpath:hibernate.properties</u></strong></span><span style=" color:#2a00ff; background-color:#fbfbfb;">"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;property</span><span style=" color:#000000; background-color:#fbfbfb;"> name=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"eventListeners"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;map&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
            </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;entry</span><span style=" color:#000000; background-color:#fbfbfb;"> key=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"merge"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
                </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;bean</span><span style=" color:#000000; background-color:#fbfbfb;">
                    class=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"</span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;">/&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
            </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/entry&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/map&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/property&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;property</span><span style=" color:#000000; background-color:#fbfbfb;"> name=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"configLocations"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;list&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
            </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;value&gt;</span><span style=" color:#000000; background-color:#fbfbfb;"><strong><u>classpath:hibernate*.xml</u></strong></span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/value&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/list&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/property&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
</span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/bean&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
</span></pre>


<p>Yes, setelah bertapa beberapa hari akhirnya ketemulah biang errornya (coba tebak yang mana :P)
Dan berikut ini konfigurasi setelah saya rubah.</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;bean</span><span style=" color:#000000; background-color:#fbfbfb;"> id=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"sessionFactory"</span><span style=" color:#000000; background-color:#fbfbfb;">
    class=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"</span><span style=" color:#000000; background-color:#fbfbfb;">
    p:dataSource-ref=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"dataSource"</span><span style=" color:#000000; background-color:#fbfbfb;">
    p:hibernateProperties=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"/WEB-INF/classes/</span><span style=" color:#2a00ff; background-color:#fbfbfb;"><strong><u>hibernate.properties</u></strong></span><span style=" color:#2a00ff; background-color:#fbfbfb;">"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;property</span><span style=" color:#000000; background-color:#fbfbfb;"> name=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"eventListeners"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;map&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
            </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;entry</span><span style=" color:#000000; background-color:#fbfbfb;"> key=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"merge"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
                </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;bean</span><span style=" color:#000000; background-color:#fbfbfb;">
                    class=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"</span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;">/&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
            </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/entry&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/map&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/property&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;property</span><span style=" color:#000000; background-color:#fbfbfb;"> name=</span><span style=" color:#2a00ff; background-color:#fbfbfb;">"configLocations"</span><span style=" color:#7f0055; background-color:#fbfbfb;">&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;list&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
            </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;value&gt;</span><span style=" color:#000000; background-color:#fbfbfb;"><strong><u>/WEB-INF/classes/hibernate*.xml</u></strong></span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/value&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
        </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/list&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
    </span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/property&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
</span><span style=" color:#7f0055; background-color:#fbfbfb;">&lt;/bean&gt;</span><span style=" color:#000000; background-color:#fbfbfb;">
</span></pre>


<p>Setelah ditelusuri ternyata ketika dijalankan pada glassfish spring tidak mengenali classpathnya di sebelah mana, sehingga harus merujuk langsung ke tempat dimana semua file dicompile yaitu pada /WEB-INF/classes, dan walhasil cimande saya berhasil jalan di glassfish. Nah pertanyaan selanjutnya bagaimana jika saya menaruh file konfigurasinya di dalam jar file? Bagi yang bisa bantu ditunggu komennya di bawah tulisan ini. Semoga bermanfaat&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Access Object (DAO) Dan Service/Facade Pattern, Apa Dan Mengapa]]></title>
    <link href="http://diian.org/blog/2011/04/24/data-access-object-dao-dan-service-facade-pattern-apa-dan-mengapa/"/>
    <updated>2011-04-24T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2011/04/24/data-access-object-dao-dan-service-facade-pattern-apa-dan-mengapa</id>
    <content type="html"><![CDATA[<p>Sering saya mendapat pertanyaan dari teman maupun adik kelas tentang &ldquo;Gimana caranya bikin DAO?&rdquo;, &ldquo;Kenapa harus pake DAO?&rdquo;, ataupun pertanyaan paling general &ldquo;DAO itu apaan sih?&rdquo;. Maklum, saya memang yang paling ngeyel mengkritik masalah bentuk dan kerapian baris kode aplikasi bikinan rekan-rekan seperjuangan yang berhubungan dengan database/persistence, bahkan tidak jarang mengesampingkan bussines proccess apikasi itu sendiri. Yah memang terlalu teknis sih, tapi di dunia open source kerapian kode itu nomor wahid (mungkin :D), ditonton dunia gitu, berbeda dengan barang close source yang orang cuma tau itu barang tiba-tiba ada, walaupun kerapian kode itu tetap penting. Mungkin tulisan adalah sedikit bentuk curhat saya kepada banyak pihak yang menganggap saya sebagai orang yang paling meyebalkan urusan coding selama ini (sok teraniaya banget :P). Memang saya sering jawab &ldquo;cari di internet&rdquo; atau &ldquo;kan ada google&rdquo; sebelum saya sadar bahwa mau gak mau, gak mau mau, mau mau enggak, ataupun mau mau mau, sebagian siswa Indonesia malas mebaca tulisan yang sedikit ribet, sedikit panjang, ditambah lagi pake bahasa Belanda. Komplit dah, dan akhirnya memutuskan untuk bertanya pada orang sok tau seperti saya :D Berikut sedikit jawaban dari saya, semoga bermanfaat&hellip;
Data Access Object
Data Access Object (DAO) merupakan sebuah object yang menyediakan sebuah abstract interface terhadap beberapa database atau mekanisme persistence, menyediakan beberapa operasi tertentu tanpa mengekspos detail database. Penerapan konsep ini sering disebut dengan separation of concern dimana setiap kode dipisahkan berdasarkan fungsinya sehingga kode diatasnya hanya perlu mengetahui secara abstrak cara mengakses data tanpa perlu mengetahui bagaimana akses ke sumber data diimplementasikan. DAO sering dikaitkan dengan Java EE dan akses ke relational database melalu JDBC API, karena memang DAO berasal dari pedoman praktek Sun Microsystem. Kebanyakan peggunaan DAO adalah satu objek DAO untuk satu objek entity.
Berikut contoh sederhana penggunaan DAO dengan penerapan aksess ke sumber data menggunakan JPA. Dimisalkan saya mempunyai dua buah class entity yaitu barang dan kategori barang.
KategoriBarang.java</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>public</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>class</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> KategoriBarang {
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>String</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> kode;
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>String</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> nama;
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>String</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> deskripsi;
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>List</strong></span><span style=" color:#000000; background-color:#fbfbfb;">&lt;Barang&gt; daftarBarang;
    </span><span style=" color:#3f5fbf; background-color:#fbfbfb;">/**</span><span style=" color:#000000; background-color:#fbfbfb;">
</span><span style=" color:#3f5fbf; background-color:#fbfbfb;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=" color:#7f9fbf; background-color:#fbfbfb;"><strong>*</strong></span><span style=" color:#3f5fbf; background-color:#fbfbfb;"> getter dan setter</span><span style=" color:#000000; background-color:#fbfbfb;">
</span><span style=" color:#3f5fbf; background-color:#fbfbfb;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span style=" color:#000000; background-color:#fbfbfb;">
}
</span></pre>


<p>Barang.java</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>public</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>class</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> Barang {
  
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>String</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> kode;
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>String</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> nama;
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>long</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> harga;
    </span><span style=" color:#7f0055; background-color:#fbfbfb;"><strong>private</strong></span><span style=" color:#000000; background-color:#fbfbfb;"> KategoriBarang kategori;
    </span><span style=" color:#3f5fbf; background-color:#fbfbfb;">/**</span><span style=" color:#000000; background-color:#fbfbfb;">
</span><span style=" color:#3f5fbf; background-color:#fbfbfb;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=" color:#7f9fbf; background-color:#fbfbfb;"><strong>*</strong></span><span style=" color:#3f5fbf; background-color:#fbfbfb;"> getter dan setter</span><span style=" color:#000000; background-color:#fbfbfb;">
</span><span style=" color:#3f5fbf; background-color:#fbfbfb;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span style=" color:#000000; background-color:#fbfbfb;">
}
</span></pre>


<p>Berikut contoh penggunaa DAO untuk kedua entity tersebut</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>class</strong></span><span style=" color:#000000;"> BarangDAO {
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> EntityManager entityManager;
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setEntityManager(EntityManager entityManager) {
        </span><span style=" color:#7f0055;"><strong>this</strong></span><span style=" color:#000000;">.entityManager = entityManager;
    }
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>final</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> getAllQuery = </span><span style=" color:#2a00ff;">"SELECT b FROM Barang b"</span><span style=" color:#000000;">;
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>final</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> getByIdQuery = </span><span style=" color:#2a00ff;">"FROM Barang b WHERE b.kode = :kode"</span><span style=" color:#000000;">;
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>List</strong></span><span style=" color:#000000;">&lt;Barang&gt; getAll() {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> entityManager.createQuery(getAllQuery).getResultList();
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> Barang getById(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kode) {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> (Barang) entityManager.createQuery(getByIdQuery)
                .setParameter(</span><span style=" color:#2a00ff;">"kode"</span><span style=" color:#000000;">, kode).getSingleResult();
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> save(Barang barang) {
        entityManager.persist(barang);
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> delete(Barang barang) {
        entityManager.remove(barang);
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> KategoriBarang getKategori(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeBarang) {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> getById(kodeBarang).getKategori();
    }
}
</span></pre>


<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>class</strong></span><span style=" color:#000000;"> KategoriBarangDAO {
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> EntityManager entityManager;
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setEntityManager(EntityManager entityManager) {
        </span><span style=" color:#7f0055;"><strong>this</strong></span><span style=" color:#000000;">.entityManager = entityManager;
    }
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>final</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> getAllQuery = </span><span style=" color:#2a00ff;">"SELECT b FROM KategoriBarang b"</span><span style=" color:#000000;">;
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>final</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> getByIdQuery = </span><span style=" color:#2a00ff;">"FROM KategoriBarang b WHERE b.kode = :kode"</span><span style=" color:#000000;">;
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>List</strong></span><span style=" color:#000000;">&lt;KategoriBarang&gt; getAll() {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> entityManager.createQuery(getAllQuery).getResultList();
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> KategoriBarang getById(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kode) {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> (KategoriBarang) entityManager.createQuery(getByIdQuery)
                .setParameter(</span><span style=" color:#2a00ff;">"kode"</span><span style=" color:#000000;">, kode).getSingleResult();
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> save(KategoriBarang kategori) {
        entityManager.persist(kategori);
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> delete(KategoriBarang kategori) {
        entityManager.remove(kategori);
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>List</strong></span><span style=" color:#000000;">&lt;Barang&gt; getKategori(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeKategoriBarang) {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> getById(kodeKategoriBarang).getDaftarBarang();
    }
}
</span></pre>


<p>Panjang bukan? Hehehehe, tenang saja di java semuanya bisa diakalin, kita tahu bahwa beberapa method seperti getAll, getById, save, dan delete merupakan method yang umum dan sering diguakan dalam persistence, dengan kata lain method-method tersebut dapat diabstraksi. Berikut diagramnya
Java juga menyediakan generic type sejak versi 5, sehingga dalam pembuatan DAO kita dapat menciptakan sebuah mantra yang dinamakan generic DAO, fungsi utama dari generic type ini adalah untuk menghandle beberapa fungsi yang mengembalikan nilai secara dinamis, sebagai contoh diatas adalah method getById. Berikut contoh kodenya.</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>abstract</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>class</strong></span><span style=" color:#000000;"> GenericDAO&lt;T&gt; {
    </span><span style=" color:#7f0055;"><strong>protected</strong></span><span style=" color:#000000;"> EntityManager entityManager;
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setEntityManager(EntityManager entityManager) {
        </span><span style=" color:#7f0055;"><strong>this</strong></span><span style=" color:#000000;">.entityManager = entityManager;
    }
    </span><span style=" color:#7f0055;"><strong>protected</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>abstract</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>Class</strong></span><span style=" color:#000000;">&lt;T&gt; getEntityClass();
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>List</strong></span><span style=" color:#000000;">&lt;T&gt; getAll() {
        </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> query = </span><span style=" color:#2a00ff;">"FROM "</span><span style=" color:#000000;"> + getEntityClass().getName();
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> entityManager.createQuery(query).getResultList();
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> T getById(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> id) {
        </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> query = </span><span style=" color:#2a00ff;">"FROM "</span><span style=" color:#000000;"> + getEntityClass().getName()
                + </span><span style=" color:#2a00ff;">" WHERE kode = :kode"</span><span style=" color:#000000;">;
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> (T) entityManager.createQuery(query).setParameter(</span><span style=" color:#2a00ff;">"kode"</span><span style=" color:#000000;">, id)
                .getSingleResult();
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> save(T entity) {
        entityManager.persist(entity);
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> delete(T entity) {
        entityManager.remove(entity);
    }
}
</span></pre>


<p>Salah satu keuntungan menggunakan generic DAO adalah menghindari duplikasi data. Sehingga kita hanya perlu membuat turunan dari generic DAO tersebut dan menambahkan beberapa method spesifik bila diperlukan.</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>class</strong></span><span style=" color:#000000;"> BarangDAO </span><span style=" color:#7f0055;"><strong>extends</strong></span><span style=" color:#000000;"> GenericDAO&lt;Barang&gt; {
    @Override
    </span><span style=" color:#7f0055;"><strong>protected</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>Class</strong></span><span style=" color:#000000;">&lt;Barang&gt; getEntityClass() {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> Barang.class;
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> KategoriBarang getKategori(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeBarang) {
        </span><span style=" color:#7f0055;"><strong>return</strong></span><span style=" color:#000000;"> getById(kodeBarang).getKategori();
    }
}
</span></pre>


<p>Service / Facade
Facade merupakan sebuah objek yang berfungsi untuk menyederhanakan kumpulan kode besar seperti library. Dalam kasus database kita dapat menggunakan facade untuk mengelompokkan beberapa DAO dalam sebuah transaksi. Business logic juga dapat diletakkan pada bagian ini.
Berikut contoh penggunaan facade</p>

<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>interface</strong></span><span style=" color:#000000;"> BarangService {
  
    </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> saveBarang(Barang barang);
  
    </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setKategoriBarang(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeBarang, </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeKategori);
  
}
</span></pre>


<pre style="color:#000000;background:#fbfbfb;padding:5px;border:#cecece 1px solid;overflow:auto;"><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>class</strong></span><span style=" color:#000000;"> BarangServiceImpl </span><span style=" color:#7f0055;"><strong>implements</strong></span><span style=" color:#000000;"> BarangService {
  
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> BarangDAO barangDAO;
    </span><span style=" color:#7f0055;"><strong>private</strong></span><span style=" color:#000000;"> KategoriBarangDAO kategoriBarangDAO;
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setBarangDAO(BarangDAO barangDAO) {
        </span><span style=" color:#7f0055;"><strong>this</strong></span><span style=" color:#000000;">.barangDAO = barangDAO;
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setKategoriBarangDAO(KategoriBarangDAO kategoriBarangDAO) {
        </span><span style=" color:#7f0055;"><strong>this</strong></span><span style=" color:#000000;">.kategoriBarangDAO = kategoriBarangDAO;
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> saveBarang(Barang barang) {
        barangDAO.save(barang);
    }
    </span><span style=" color:#7f0055;"><strong>public</strong></span><span style=" color:#000000;"> </span><span style=" color:#7f0055;"><strong>void</strong></span><span style=" color:#000000;"> setKategoriBarang(</span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeBarang, </span><span style=" color:#7f0055;"><strong>String</strong></span><span style=" color:#000000;"> kodeKategori) {
        KategoriBarang kategoriBarang = kategoriBarangDAO.getById(kodeKategori);
        Barang barang = barangDAO.getById(kodeBarang);
        barang.setKategori(kategoriBarang);
        barangDAO.save(barang);
    }
}
</span></pre>


<p>Penggabungan antara DAO dan Service pattern secara disiplin dapat menghasilkan kode yang bukan hanya mudah dibaca maupun ditesting, bahkan dapat dimodifikasi tanpa merubah modul yang menggunakan DAO maupun service, sebagai contoh ketika saya ingin mengganti akses ke database menggunakan JDBC, hanya perlu modifikasi pada bagian DAO tanpa merubah sama sekali bagian business logic pada service. Selain itu juga meningkatkan efisiensi dan kinerja dari lapisan data karena merupakan standart software yang dapat digunakan kembali (reusable).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cimande 2.0 RC, Apa Bedanya? (RESTFul #1)]]></title>
    <link href="http://diian.org/blog/2010/10/18/cimande-2-0-rc-apa-bedanya-restful-1/"/>
    <updated>2010-10-18T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2010/10/18/cimande-2-0-rc-apa-bedanya-restful-1</id>
    <content type="html"><![CDATA[<p>Setelah berjuang sekitar beberapa bulan terakhir, akhirnya hari ini Cimande v2.0 RC resmi dirilis. Sesuai dengan judul blog saya kali ini, Cimande 2? Apa bedanya dengan yang sudah-sudah? Pada versi terbaru ini Cimande 2.0 menggunakan arsitektur RESTFul web service. Salah satu arsitektur web yang beberapa tahun terakhir ini lagi hot-hotnya, dianggap sebagai arsitektur yang cool, sederhana dan paling ramah bagi user/aplikasi desktop maupun mobile secara umum. Juga sejalan dengan dengan trend baru Web 2.0 yang mulai menjauh dari SOAP dan beralih ke konsep REST.
Sedikit melenceng dari judul, pada bagian pertama ini saya belum akan membahas lebih detail mengenai teknis Cimande2, akan tetapi lebih ke konsep dan prinsip dari REST yang merupakan salah satu arsitektur yang digunakan oleh Cimande2 ini.
Berikut sedikit sejarah singkat tentang arsitektur REST :</p>

<blockquote>
 Representational State Transfer (REST) merupakan arsitektur software untuk distribusi hypermedia diantaranya World Wide Web. Istilah Representational State Transfer pertama kali diperkenalkan dan didefinisikan pada tahun 2000 oleh Roy T Fielding pada disertasi doktoralnya. Fielding merupakan salah satu dari penggagas spesifikasi HTTP 1.0 dan 1.1.
</blockquote>


<p>Saya akan menjelaskan secara singkat mengenai beberapa prinsip dasar dari arsitektur REST, diantaranya:</p>

<ul>
 <li>
  <div align="justify">
  
 Menggunakan
   <em>HTTP dan HTTP Method secara tepat.</em>
  </div>
 </li>
 <li>
  <div align="justify">
  
 Semua tentang
   <em> Resource </em>dan
   <em> URI</em>
  </div>
 </li>
 <li>
  <div align="justify">
  
   <em>Stateless</em>
  </div>
 </li>
 <li>
  <div align="justify">
  
 Mendukung
   <em>multiple representation</em>.
  </div>
 </li>
</ul>


<h2>#</h2>

<p>&nbsp;
Menggunakan HTTP dan HTTP Method secara tepat
Salah satu karakteristik dari RESTFul Web Service adalah menggunakan HTTP, protokol yang digunakan lebih dari 60% browser di seluruh muka bumi ini untuk mengakses server. Ini merupakan salah satu alasan mengapa trend Web 2.0 lebih cenderung menjauhi SOAP, salah satu kutipan yang pernah saya dengar ?Mengapa menggunakan protokol seperti SOAP bila setiap hari sebagian besar penduduk bumi menggunakan HTTP.?
Selanjutnya adalah penggunaan standard HTTP method diantaranya</p>

<ul>
 <li>
  <div align="justify">
  
 POST untuk membuat sumberdaya (resource) pada server.
  </div>
 </li>
 <li>
  <div align="justify">
  
 GET untuk menerima sumberdaya.
  </div>
 </li>
 <li>
  <div align="justify">
  
 PUT untuk merubah atau memperbaharui sumberdaya; dan
  </div>
 </li>
 <li>
  <div align="justify">
  
 DELETE untuk menghapus sumberdaya.
  </div>
 </li>
</ul>


<p>Menggunakan HTTP method secara tepat?
Berikut dua contoh penggunaan method yang berbeda dengan menghasilhan efek samping yang sama.</p>

<blockquote>
 GET /hapususer?nama=dian HTTP/1.1
</blockquote>


<p>Ini sangat tidak dianjurkan karena method GET merupakan safe method yang seharusnya dalam penggunaannya tidak menghasilkan efek samping terhadap server. Dan berikut ini adalah contoh penggunaan HTTP method secara tepat.</p>

<blockquote>
 DELETE /user/dian HTTP/1.1
</blockquote>


<p>Sebagai pedoman umum, diharapkan mengikuti pedoman REST untuk menggunakan HTTP method secara eksplisit dengan menggunakan kata benda dalam URI, bukan kata kerja.</p>

<h2>#</h2>

<p>&nbsp;
Semua tentang Resource dan URI
Sumberdaya dapat berupa sebuah informasi maupun deskripsi dari sebuah item. Sebagai contoh blog entry ataupun blog author.
Setiap uri langsung merujuk kepada sumberdaya, tepat sasaran dan mudah ditebak. Bungung? Berikut beberapa contoh uri untuk mengakses blog entry saya:
<a href="http://blogs.mervpolis.com/roller/dwx/entry/hibernate_event_listener">http://blogs.mervpolis.com/roller/dwx/entry/hibernate_event_listener</a>
<a href="http://blogs.mervpolis.com/roller/dwx/date/20101006">http://blogs.mervpolis.com/roller/dwx/date/20101006</a>
<a href="http://blogs.mervpolis.com/roller/dwx/category/Java">http://blogs.mervpolis.com/roller/dwx/category/Java</a>
Contoh URI diatas merupakan contoh penggunaan directory structure-like URIs. Beberapa pedoman tambahan dalam penggunaan struktur URI pada RESTFul Web Service adalah sebagai berikut:</p>

<ul>
 <li>
  <div align="justify">
  
 Sembunyikan ekstensi file pada
   <em>server-side scripting </em>(.asp, .php, .jsp), jika ada.
  </div>
 </li>
 <li>
  <div align="justify">
  
 Menjaga agar tetap menggunakan
   <em>lowercase</em>.
  </div>
 </li>
 <li>
  <div align="justify">
  
 Mengganti spasi dengan tanda hubung atau garis bawah.
  </div>
 </li>
 <li>
  <div align="justify">
  
 Mencegah query string sebisa mungkin.
  </div>
 </li>
</ul>


<p>&nbsp;
Cukup sekian untuk saat ini, poin ke 3 dan ke 4 selanjutnya akan saya jabarkan pada RESTFul bagian ke 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP Taglib at Velocity, Nah Lho...]]></title>
    <link href="http://diian.org/blog/2010/10/06/jsp-taglib-at-velocity-nah-lho/"/>
    <updated>2010-10-06T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2010/10/06/jsp-taglib-at-velocity-nah-lho</id>
    <content type="html"><![CDATA[<p>Nah ini kasus baru ketika saya menggunakan velocity sebagai presentation layer, yap salah satu keunggulan dari velocity adalah kecepatannya karena velocity tidak membutuhkan proses tranformasi dan kompilasi layaknya JSP. Namun sedikit mengingatkan tentang pepatah lama, tak ada gading yang tak retak. Dan berdasarkan info yang pernah saya dengar salah satu keunggulan JSP dibanding velocity adalah taglibnya, dilema deh? Karena sayangnya menggunakan taglib memang lebih menyenangkan :D sempat terpikirkan untuk memindahkan semua presentation layer ke JSP sebelum akhirnya saya main ke Website Struts2. Hahai sebuah pencerahan datang?
 Velocity tags are extensions of the generic Struts Tags provided by the framework. You can get jump right in just by knowing the structure in which the tags can be accessed: #s<em>tag </em>(&hellip;) &hellip; #end, where tag is any of the Struts Tags supported by the framework.
 Yayaya Velocity tags, dan berikut perbandingannya dengan JSP tags</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;s:form</span> <span class="na">action=</span><span class="s">&quot;updatePerson&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;s:textfield</span> <span class="na">label=</span><span class="s">&quot;First name&quot;</span> <span class="na">name=</span><span class="s">&quot;firstName&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;s:submit</span> <span class="na">value=</span><span class="s">&quot;Update&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/s:form&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> dan dalam velocity dapat dituliskan seperti berikut</p>

<pre>#sform ("action=updatePerson")
    #stextfield ("label=First name" "name=firstName")
    #ssubmit ("value=Update")
#end
</pre>


<p> Dan akhirnya migrasi ke JSP pun untuk sementara dibatalkan :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memanfaatkan Struts Action Mapper Untuk Membuat Clean URL]]></title>
    <link href="http://diian.org/blog/2010/09/29/memanfaatkan-struts-action-mapper-untuk-membuat-clean-url/"/>
    <updated>2010-09-29T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2010/09/29/memanfaatkan-struts-action-mapper-untuk-membuat-clean-url</id>
    <content type="html"><![CDATA[<p>Ini merupakan salah satu favorit saya yang ada di Struts yaitu ActionMapper. Biar lebih jelas berikut saya kutip sedikit dari dokumentasi Struts2.
 ActionMapper interface menyediakan pemetaan antara HTTP Request dan Action Invocation Request atau sebaliknya.
 Lebih sederhananya dengan mengimplementasikan ActionMapper ini kita dapat menentukan action class yang akan dieksekusi berdasarkan HttpServletRequest yang kita terima.
 Sebagai contoh saya ingin mengubah gaya url seperti berikut ini
 &nbsp;</p>

<pre>http://domain/project/employe?id=1234</pre>


<p> &nbsp;
 menjadi
 &nbsp;</p>

<pre>http://domain/project/employe/1234</pre>


<p> &nbsp;
 sehingga saya menentukan bahwa baris setelah nama project merupakan nama action (/employee) dan baris setelah nama action adalah id (/1234).
 Berikut kodenya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mervpolis</span><span class="o">.</span><span class="na">dwx</span><span class="o">.</span><span class="na">struts</span><span class="o">.</span><span class="na">mapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.struts2.dispatcher.mapper.ActionMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.struts2.dispatcher.mapper.DefaultActionMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.opensymphony.xwork2.config.ConfigurationManager</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCustomMapper</span> <span class="kd">extends</span> <span class="n">DefaultActionMapper</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">ActionMapping</span> <span class="nf">getMapping</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'> <span class="n">ConfigurationManager</span> <span class="n">configManager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">ActionMapping</span> <span class="n">mapping</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">getMapping</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">configManager</span><span class="o">);</span>
</span><span class='line'> <span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ketika bukan action yang dipanggil</span>
</span><span class='line'><span class="cm"> * ex: http://domain/project/gambar.jpg</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">mapping</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'> <span class="k">return</span> <span class="n">mapping</span><span class="o">;</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">mapping</span><span class="o">.</span><span class="na">getParams</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'> <span class="n">mapping</span><span class="o">.</span><span class="na">setParams</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span>
</span><span class='line'> <span class="o">());</span>
</span><span class='line'> <span class="c1">// Menambil url path</span>
</span><span class='line'> <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletPath</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'> <span class="c1">// Memotong-motong path diantara karakter &#39;/&#39;</span>
</span><span class='line'> <span class="n">String</span> <span class="n">actions</span><span class="o">[]</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="c1">// Array terakhir sebagai id</span>
</span><span class='line'> <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">actions</span><span class="o">[</span><span class="n">actions</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'> <span class="c1">// Array sebelum id sebagai actionName</span>
</span><span class='line'> <span class="n">String</span> <span class="n">actionName</span> <span class="o">=</span> <span class="n">actions</span><span class="o">[</span><span class="n">actions</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">];</span>
</span><span class='line'> <span class="n">mapping</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">actionName</span><span class="o">);</span>
</span><span class='line'> <span class="n">mapping</span><span class="o">.</span><span class="na">getParams</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'> <span class="k">return</span> <span class="n">mapping</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> Selanjutnya tinggal mendaftarkan ActionMapper dengan menambahkan properti pada struts.properties</p>

<pre>struts.mapper.class=com.mervpolis.dwx.struts.mapper.MyCustomMapper</pre>


<p> atau dalam struts.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;constant</span> <span class="na">name=</span><span class="s">&quot;struts.mapper.class&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mervpolis.dwx.struts.mapper.MyCustomMapper&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p> Kemudian action class cukup membuat method setId(String id) untuk mendapatkan id dari url, tidak hanya action class, dengan memanipulasi ActionMapper ini kita dapat pula menentukan method yang akan dieksekusi ketika action class dipanggil.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hibernate Event Listener]]></title>
    <link href="http://diian.org/blog/2010/09/19/hibernate-event-listener/"/>
    <updated>2010-09-19T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2010/09/19/hibernate-event-listener</id>
    <content type="html"><![CDATA[<p>Barusan saya baca-baca tentang database trigger dan sempat coba-coba, malas juga ternyata nulis kodenya yang begitu banyak :p benar-benar programmer yang buruk, hehehehe&hellip; Dan seperti apa yang saya inginkan, tuink&hellip; sangat tepat, ternyata hibernate juga menyediakan fasilitas yang mirip seperti trigger pada database, yaitu Hibernate Event. Sebuah mekanisme yang akan otomatis dijalankan apabila pemicu dipanggil. Untuk penjelasan lebih lanjut tentang event dan trigger bisa lihat di sini dan di sini (lagi-lagi males nulis :p).
 Langsung saja ke kasusnya&hellip;
 Saya mempunyai dua buah entity yaitu Produk dan CatatanAktivitasProduk. Dan saya akan membuat sebuah mekanisme agar hibernate secara otomatis manambahkan baris data pada CatatanAktivitasProduk ketika user melakukan transaksi (CRUD) data terhadap table Produk. Baris data berupa tanggal transaksi, aktivitas (lihat, tambah, perbarui, ataupun hapus), dan id produk yang terpengaruh akibat transaksi yang dilakukan oleh user tersebut.
 Pertama berikut entity yang saya butuhkan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mervpolis</span><span class="o">.</span><span class="na">dwx</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.GenerationType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Table</span><span class="o">;</span>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Produk</span> <span class="o">{</span>
</span><span class='line'> <span class="nd">@Id</span>
</span><span class='line'> <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="nd">@Column</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">String</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'> <span class="nd">@Column</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">long</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'> <span class="nd">@Column</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">String</span> <span class="n">deskripsi</span><span class="o">;</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">String</span> <span class="nf">getNama</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">nama</span> <span class="o">=</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getHarga</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHarga</span><span class="o">(</span><span class="kt">long</span> <span class="n">harga</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">harga</span> <span class="o">=</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDeskripsi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">deskripsi</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDeskripsi</span><span class="o">(</span><span class="n">String</span> <span class="n">deskripsi</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">deskripsi</span> <span class="o">=</span> <span class="n">deskripsi</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mervpolis</span><span class="o">.</span><span class="na">dwx</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.Timestamp</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.GenerationType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.JoinColumn</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.ManyToOne</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.Table</span><span class="o">;</span>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CatatanAktivitasProduk</span> <span class="o">{</span>
</span><span class='line'> <span class="nd">@Id</span>
</span><span class='line'> <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span><span class="n">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
</span><span class='line'> <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="nd">@ManyToOne</span>
</span><span class='line'> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;produk_id&quot;</span><span class="o">)</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">Produk</span> <span class="n">produk</span><span class="o">;</span>
</span><span class='line'> <span class="nd">@Column</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">String</span> <span class="n">aktivitas</span><span class="o">;</span>
</span><span class='line'> <span class="nd">@Column</span>
</span><span class='line'> <span class="kd">private</span> <span class="n">Timestamp</span> <span class="n">tanggal</span><span class="o">;</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">getProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">produk</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProduk</span><span class="o">(</span><span class="n">Produk</span> <span class="n">produk</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">produk</span> <span class="o">=</span> <span class="n">produk</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAktivitas</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">aktivitas</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAktivitas</span><span class="o">(</span><span class="n">String</span> <span class="n">aktivitas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">aktivitas</span> <span class="o">=</span> <span class="n">aktivitas</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">Timestamp</span> <span class="nf">getTanggal</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">tanggal</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTanggal</span><span class="o">(</span><span class="n">Timestamp</span> <span class="n">tanggal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">this</span><span class="o">.</span><span class="na">tanggal</span> <span class="o">=</span> <span class="n">tanggal</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> Dan selanjutnya adalah membuat listenernya yang akan otomatis melakukan aksi ketika user melakukan CRUD terhadap table Produk. Untuk contoh saya akan membuat listener yang akan menjalankan event setelah user melakukan insert data terhadap table Produk.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mervpolis</span><span class="o">.</span><span class="na">dwx</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">event</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.sql.Timestamp</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.Session</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.event.PostInsertEvent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.event.PostInsertEventListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mervpolis.dwx.hibernate.entity.CatatanAktivitasProduk</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mervpolis.dwx.hibernate.entity.Produk</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukEventListener</span> <span class="kd">implements</span> <span class="n">PostInsertEventListener</span> <span class="o">{</span>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPostInsert</span><span class="o">(</span><span class="n">PostInsertEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">Produk</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">CatatanAktivitasProduk</span> <span class="n">aktivitasProduk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CatatanAktivitasProduk</span><span class="o">();</span>
</span><span class='line'> <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span><span class='line'> <span class="n">aktivitasProduk</span><span class="o">.</span><span class="na">setAktivitas</span><span class="o">(</span><span class="s">&quot;tambah&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">aktivitasProduk</span><span class="o">.</span><span class="na">setProduk</span><span class="o">((</span><span class="n">Produk</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>
</span><span class='line'> <span class="n">aktivitasProduk</span>
</span><span class='line'> <span class="o">.</span><span class="na">setTanggal</span><span class="o">(</span><span class="k">new</span> <span class="n">Timestamp</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()));</span>
</span><span class='line'> <span class="n">session</span><span class="o">.</span><span class="na">saveOrUpdate</span><span class="o">(</span><span class="n">aktivitasProduk</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> Selanjutnya adalah mendaftarkan listener pada konfigurasi hibernate (hibernate.cfg.xml).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?--&gt;</span>
</span><span class='line'><span class="nt">&lt;hibernate-configuration&gt;</span>
</span><span class='line'> <span class="nt">&lt;session-factory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.connection.driver_class&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   com.mysql.jdbc.Driver
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.connection.password&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   admin
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.connection.url&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   jdbc:mysql://localhost:3306/test
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.connection.username&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   root
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.dialect&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   org.hibernate.dialect.MySQLDialect
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.hbm2ddl.auto&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   update
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.show_sql&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   true
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.mervpolis.dwx.hibernate.entity.Produk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.mervpolis.dwx.hibernate.entity.CatatanAktivitasProduk&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;listener</span> <span class="na">class=</span><span class="s">&quot;com.mervpolis.dwx.hibernate.event.ProdukEventListener&quot;</span> <span class="na">type=</span><span class="s">&quot;post-insert&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;/session-factory&gt;</span>
</span><span class='line'><span class="nt">&lt;/hibernate-configuration&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> Selanjutnya saya akan mencoba menjalankan sebuah kode yang akan melakukan insert data terhadap table produk.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">mervpolis</span><span class="o">.</span><span class="na">dwx</span><span class="o">.</span><span class="na">hibernate</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.Session</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.SessionFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.hibernate.cfg.AnnotationConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mervpolis.dwx.hibernate.entity.Produk</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InsertData</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'> <span class="n">SessionFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfiguration</span><span class="o">().</span><span class="na">configure</span><span class="o">()</span>
</span><span class='line'> <span class="o">.</span><span class="na">buildSessionFactory</span><span class="o">();</span>
</span><span class='line'> <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
</span><span class='line'> <span class="n">Produk</span> <span class="n">produk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'> <span class="n">session</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">begin</span><span class="o">();</span>
</span><span class='line'> <span class="n">produk</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Sendal Jepit&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">produk</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'> <span class="n">produk</span><span class="o">.</span><span class="na">setDeskripsi</span><span class="o">(</span><span class="s">&quot;Sendal yang dijepit&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">session</span><span class="o">.</span><span class="na">saveOrUpdate</span><span class="o">(</span><span class="n">produk</span><span class="o">);</span>
</span><span class='line'> <span class="n">session</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> Dan apa yang terjadi ketika kode diatas saya jalankan? Secara otomatis hibernate akan menjalankan perintah yang saya taruh pada listener. Nahlho mana buktinya? Ada baiknya bila anda buktikan sendiri dengan mencoba membuat mekanisme seperti di atas :) selamat mencoba.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menggunakan Spring Annotation (Struts2-Spring #2)]]></title>
    <link href="http://diian.org/blog/2010/09/08/menggunakan-spring-annotation-struts2-spring-2/"/>
    <updated>2010-09-08T00:00:00+07:00</updated>
    <id>http://diian.org/blog/2010/09/08/menggunakan-spring-annotation-struts2-spring-2</id>
    <content type="html"><![CDATA[<p>Ini lanjutan dari blog saya yang kemarin tentang Integrasi Struts2 dengan Spring Framework, dan yang ingin saya sharing kali ini gak akan jauh berbeda dari topik kemarin, yaitu tentang salah satu fitur dari Spring Framework yang sudah ada sejak versi 2.5 yaitu annotation. Dalam hal ini saya akan mencontohkan bagaimana melakukan autowiring terhadap DataSource (gak jauh dari yang kemarin, cuma ganti jadi anotasi doank).
Kali ini saya membuat kasus (lohloh bikin kasus) dimana saya memiliki sebuah Data Access Object (DAO) untuk melakukan transaksi database, dan DAO ini membutuhkan DataSource untuk dapat melakukan tugasnya yang akan digunakan oleh Controller untuk menyampaikannya kepada Viewer Layer. Hehehehe?. Saya juga bingung gimana menggambarkannya.
Langsung berangkat ke TKP.
Berikut sedikit modifikasi dari applicationContext-jdbc.xml</p>

<pre style="border-right: #cecece 1px solid; padding-right: 5px; border-top: #cecece 1px solid; padding-left: 5px; min-height: 40px; padding-bottom: 5px; overflow: auto; border-left: #cecece 1px solid; width: 550px; padding-top: 5px; border-bottom: #cecece 1px solid; background-color: #fbfbfb"><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  1: <span style="color: #0000ff">&lt;?</span>xml version="1.0" encoding="UTF-8"<span style="color: #0000ff">?&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  2: <span style="color: #0000ff">&lt;</span><span style="color: #800000">beans</span> <span style="color: #ff0000">xmlns</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/beans"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  3:     <span style="color: #ff0000">xmlns</span>:<span style="color: #ff0000">xsi</span>=<span style="color: #0000ff">"http://www.w3.org/2001/XMLSchema-instance"</span> <span style="color: #ff0000">xmlns</span>:<span style="color: #ff0000">context</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/context"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  4:     <span style="color: #ff0000">xmlns</span>:<span style="color: #ff0000">p</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/p"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  5:     <span style="color: #ff0000">xsi</span>:<span style="color: #ff0000">schemaLocation</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
</span></pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  6:      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"<span style="color: #0000ff">&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  7:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ebebeb">  8:     <span style="color: #0000ff">&lt;</span><span style="color: #c71585">context</span>:<span style="color: #800000">component</span>-<span style="color: #ff0000">scan</span> <span style="color: #ff0000">base</span>-<span style="color: #ff0000">package</span>=<span style="color: #0000ff">"com.mervpolis.dwx"</span> <span style="color: #0000ff">/&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  9:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 10:     <span style="color: #0000ff">&lt;</span><span style="color: #800000">bean</span> <span style="color: #ff0000">id</span>=<span style="color: #0000ff">"dataSource"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 11:         <span style="color: #ff0000">class</span>=<span style="color: #0000ff">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 12:         <span style="color: #ff0000">p</span>:<span style="color: #ff0000">driverClassName</span>=<span style="color: #0000ff">"com.mysql.jdbc.Driver"</span> <span style="color: #ff0000">p</span>:<span style="color: #ff0000">username</span>=<span style="color: #0000ff">"root"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 13:         <span style="color: #ff0000">p</span>:<span style="color: #ff0000">password</span>=<span style="color: #0000ff">"admin"</span> <span style="color: #ff0000">p</span>:<span style="color: #ff0000">url</span>=<span style="color: #0000ff">"jdbc:mysql://localhost:3306/test"</span> <span style="color: #0000ff">/&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 14:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 15: <span style="color: #0000ff">&lt;/</span><span style="color: #800000">beans</span><span style="color: #0000ff">&gt;</span></pre></pre>


<p>Nah ada satu baris mantra yang ditambahkan di situ yang berfungsi untuk melakukan scan terhadap semua class yang mengandung anotasi seperti @Autowired @Service @Component dll.
ItemDao.java</p>

<pre style="border-right: #cecece 1px solid; padding-right: 5px; border-top: #cecece 1px solid; padding-left: 5px; min-height: 40px; padding-bottom: 5px; overflow: auto; border-left: #cecece 1px solid; width: 550px; padding-top: 5px; border-bottom: #cecece 1px solid; background-color: #fbfbfb"><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  1: <span style="color: #0000ff">package</span> com.mervpolis.dwx.struts2spring.dao;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  2:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  3: <span style="color: #0000ff">import</span> java.sql.ResultSet;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  4:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  5: <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> ItemDao {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  6:     <span style="color: #0000ff">void</span> saveItem(String name, String price);
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  7:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  8:     ResultSet getAllItems();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  9: }</pre></pre>


<p>Berikut implementasinya</p>

<pre style="border-right: #cecece 1px solid; padding-right: 5px; border-top: #cecece 1px solid; padding-left: 5px; min-height: 40px; padding-bottom: 5px; overflow: auto; border-left: #cecece 1px solid; width: 550px; padding-top: 5px; border-bottom: #cecece 1px solid; background-color: #fbfbfb"><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  1: <span style="color: #0000ff">package</span> com.mervpolis.dwx.struts2spring.dao;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  2:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  3: <span style="color: #0000ff">import</span> java.sql.Connection;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  4: <span style="color: #0000ff">import</span> java.sql.PreparedStatement;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  5: <span style="color: #0000ff">import</span> java.sql.ResultSet;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  6: <span style="color: #0000ff">import</span> java.sql.SQLException;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  7:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  8: <span style="color: #0000ff">import</span> javax.sql.DataSource;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  9:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 10: <span style="color: #0000ff">import</span> org.springframework.beans.factory.annotation.Autowired;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 11: <span style="color: #0000ff">import</span> org.springframework.stereotype.Service;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 12:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 13: <span style="color: #008000">/**
</span></pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 14:  * Sama dengan
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 15:  * &lt;code&gt;&amp;lt;bean id="itemDao" class="com.mervpolis.dwx.struts2spring.dao.ItemDaoImpl"&amp;gt;&lt;/code&gt;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 16:  *
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 17:  */
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 18: @Service
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 19: <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ItemDaoImpl <span style="color: #0000ff">implements</span> ItemDao {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 20:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 21:     <span style="color: #008000">/**
</span></pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 22:   * Nah setternya diganti dengan yang satu ini
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 23:      */
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 24:     @Autowired
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 25:     <span style="color: #0000ff">private</span> DataSource dataSource;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 26:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 27:     <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> saveItem(String name, String price) {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 28:         <span style="color: #0000ff">try</span> {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 29:             Connection connection = dataSource.getConnection();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 30:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 31:             String sql = "<span style="color: #8b0000">INSERT INTO item (name, price) VALUES (?, ?)</span>";
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 32:             PreparedStatement statement = connection.prepareStatement(sql);
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 33:             statement.setString(1, name);
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 34:             statement.setString(2, price);
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 35:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 36:             statement.executeUpdate();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 37:         } <span style="color: #0000ff">catch</span> (SQLException e) {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 38:             e.printStackTrace();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 39:         }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 40:     }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 41:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 42:     <span style="color: #0000ff">public</span> ResultSet getAllItems() {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 43:         <span style="color: #0000ff">try</span> {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 44:             Connection connection = dataSource.getConnection();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 45:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 46:             ResultSet resultSet = connection.prepareStatement(
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 47:                     "<span style="color: #8b0000">SELECT * FROM item</span>").executeQuery();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 48:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 49:             <span style="color: #0000ff">return</span> resultSet;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 50:         } <span style="color: #0000ff">catch</span> (SQLException e) {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 51:             e.printStackTrace();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 52:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 53:             <span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span>;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 54:         }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 55:     }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 56:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 57: }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 58: </pre></pre>


<p>Sudah mulai terlihat bedanya, untuk melakukan injection sudah tidak menggunakan setter lagi, tetapi dengan menggunakan @Autowired, sedangkan untuk pembuatan bean-nya digunakan @Service.
Sekarang tingga; menyuntikkan DAOnya ke controller</p>

<pre style="border-right: #cecece 1px solid; padding-right: 5px; border-top: #cecece 1px solid; padding-left: 5px; min-height: 40px; padding-bottom: 5px; overflow: auto; border-left: #cecece 1px solid; width: 550px; padding-top: 5px; border-bottom: #cecece 1px solid; background-color: #fbfbfb"><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  1: <span style="color: #0000ff">package</span> com.mervpolis.dwx.struts2spring.action;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  2:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  3: <span style="color: #0000ff">import</span> java.sql.Connection;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  4: <span style="color: #0000ff">import</span> java.sql.ResultSet;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  5: <span style="color: #0000ff">import</span> java.util.ArrayList;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  6: <span style="color: #0000ff">import</span> java.util.HashMap;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  7: <span style="color: #0000ff">import</span> java.util.List;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  8: <span style="color: #0000ff">import</span> java.util.Map;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  9:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 10: <span style="color: #0000ff">import</span> javax.sql.DataSource;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 11:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 12: <span style="color: #0000ff">import</span> org.apache.struts2.convention.annotation.Action;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 13: <span style="color: #0000ff">import</span> org.apache.struts2.convention.annotation.Result;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 14: <span style="color: #0000ff">import</span> org.apache.struts2.convention.annotation.Results;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 15: <span style="color: #0000ff">import</span> org.springframework.beans.factory.annotation.Autowired;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 16:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 17: <span style="color: #0000ff">import</span> com.mervpolis.dwx.struts2spring.dao.ItemDao;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 18: <span style="color: #0000ff">import</span> com.mervpolis.dwx.struts2spring.datasource.DataSourceAware;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 19: <span style="color: #0000ff">import</span> com.opensymphony.xwork2.ActionSupport;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 20:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 21: <span style="color: #008000">/**
</span></pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 22:  * @author Dian Aditya
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 23:  *
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 24:  */
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 25: @Results({ @Result(name = ActionSupport.SUCCESS, type = "<span style="color: #8b0000">velocity</span>", location = "<span style="color: #8b0000">/view/item/item_list.vm</span>") })
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 26: <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ItemController <span style="color: #0000ff">extends</span> ActionSupport {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 27:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 28:     <span style="color: #0000ff">private</span> List result = <span style="color: #0000ff">new</span> ArrayList();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 29:     <span style="color: #0000ff">private</span> String id;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 30:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 31:     <span style="color: #008000">/**
</span></pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 32:   * Inject lagi
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 33:      */
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ebebeb"> 34:     @Autowired
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ebebeb"> 35:     <span style="color: #0000ff">private</span> ItemDao itemDao;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 36:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 37:     @Action("<span style="color: #8b0000">/item/show</span>")
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 38:     <span style="color: #0000ff">public</span> String show() <span style="color: #0000ff">throws</span> Exception {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 39:         <span style="color: #0000ff">if</span> (itemDao == <span style="color: #0000ff">null</span>) {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 40:             addActionError("<span style="color: #8b0000">Gagal menyuntik itemDao</span>");
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 41:         } <span style="color: #0000ff">else</span> {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 42:             ResultSet resultSet = itemDao.getAllItems();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 43:             <span style="color: #0000ff">while</span> (resultSet.next()) {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 44:                 Map data = <span style="color: #0000ff">new</span> HashMap();
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 45:                 data.put("<span style="color: #8b0000">name</span>", resultSet.getString("<span style="color: #8b0000">name</span>"));
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 46:                 data.put("<span style="color: #8b0000">price</span>", resultSet.getString("<span style="color: #8b0000">price</span>"));
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 47:                 result.add(data);
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 48:             }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 49:         }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 50:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 51:         <span style="color: #0000ff">return</span> SUCCESS;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 52:     }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 53:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 54:     <span style="color: #0000ff">public</span> String getId() {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 55:         <span style="color: #0000ff">return</span> id;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 56:     }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 57:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 58:     <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> setId(String id) {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 59:         <span style="color: #0000ff">this</span>.id = id;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 60:     }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 61:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 62:     <span style="color: #0000ff">public</span> List getResult() {
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 63:         <span style="color: #0000ff">return</span> result;
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 64:     }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 65: }
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 66: </pre></pre>


<p>Dan coba dijalankan, hasilnya tidak akan jauh beda dari contoh sebelumnya.
&nbsp;
Sedikit bonus :p berikut contoh tanpa menggunakan anotasi.</p>

<pre style="border-right: #cecece 1px solid; padding-right: 5px; border-top: #cecece 1px solid; padding-left: 5px; min-height: 40px; padding-bottom: 5px; overflow: auto; border-left: #cecece 1px solid; width: 550px; padding-top: 5px; border-bottom: #cecece 1px solid; background-color: #fbfbfb"><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  1: <span style="color: #0000ff">&lt;?</span>xml version="1.0" encoding="UTF-8"<span style="color: #0000ff">?&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  2: <span style="color: #0000ff">&lt;</span><span style="color: #800000">beans</span> <span style="color: #ff0000">xmlns</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/beans"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  3:     <span style="color: #ff0000">xmlns</span>:<span style="color: #ff0000">xsi</span>=<span style="color: #0000ff">"http://www.w3.org/2001/XMLSchema-instance"</span> <span style="color: #ff0000">xmlns</span>:<span style="color: #ff0000">context</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/context"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  4:     <span style="color: #ff0000">xmlns</span>:<span style="color: #ff0000">p</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/p"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  5:     <span style="color: #ff0000">xsi</span>:<span style="color: #ff0000">schemaLocation</span>=<span style="color: #0000ff">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
</span></pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  6:      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"<span style="color: #0000ff">&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  7:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  8:     <span style="color: #0000ff">&lt;</span><span style="color: #800000">bean</span> <span style="color: #ff0000">id</span>=<span style="color: #0000ff">"dataSource"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  9:         <span style="color: #ff0000">class</span>=<span style="color: #0000ff">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 10:         <span style="color: #ff0000">p</span>:<span style="color: #ff0000">driverClassName</span>=<span style="color: #0000ff">"com.mysql.jdbc.Driver"</span> <span style="color: #ff0000">p</span>:<span style="color: #ff0000">username</span>=<span style="color: #0000ff">"root"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 11:         <span style="color: #ff0000">p</span>:<span style="color: #ff0000">password</span>=<span style="color: #0000ff">"admin"</span> <span style="color: #ff0000">p</span>:<span style="color: #ff0000">url</span>=<span style="color: #0000ff">"jdbc:mysql://localhost:3306/test"</span> <span style="color: #0000ff">/&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 12:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 13:     <span style="color: #0000ff">&lt;</span><span style="color: #800000">bean</span> <span style="color: #ff0000">id</span>=<span style="color: #0000ff">"itemDao"</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">"com.mervpolis.dwx.struts2spring.dao.ItemDaoImpl"</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 14:         <span style="color: #ff0000">p</span>:<span style="color: #ff0000">dataSource</span>-<span style="color: #ff0000">ref</span>=<span style="color: #0000ff">"dataSource"</span> <span style="color: #0000ff">/&gt;</span>
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 15:
</pre><pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 16: <span style="color: #0000ff">&lt;/</span><span style="color: #800000">beans</span><span style="color: #0000ff">&gt;</span></pre></pre>


<p>Atau secara sederhananya mungkin juga seperti ini.
&lt;p<pre style="border-right: #cecece 1px solid; padding-right: 5px; border-top: #cecece 1px solid; padding-left: 5px; min-height: 40px; padding-bottom: 5px; overflow: auto; border-left: #cecece 1px solid; width: 550px; padding-top: 5px; border-bottom: #cecece 1px solid; background-color: #fbfbfb">
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  1: <span style="color: #008000">// org.springframework.jdbc.datasource.DriverManagerDataSource</span>
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  2: DriverManagerDataSource dataSource = <span style="color: #0000ff">new</span> DriverManagerDataSource();
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  3: dataSource.setDriverClassName(&ldquo;<span style="color: #8b0000">com.mysql.jdbc.Driver</span>&rdquo;);
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  4: dataSource.setUsername(&ldquo;<span style="color: #8b0000">root</span>&rdquo;);
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  5: dataSource.setPassword(&ldquo;<span style="color: #8b0000">admin</span>&rdquo;);
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  6: dataSource.setUrl(&ldquo;<span style="color: #8b0000">jdbc:mysql://localhost:3306/test</span>&rdquo;);
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  7:
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  8: <span style="color: #008000">// javax.sql.DataSource</span>
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9">  9: DataSource source = dataSource;
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 10:
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 11: <span style="color: #008000">// com.mervpolis.dwx.struts2spring.dao.ItemDaoImpl</span>
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 12: ItemDaoImpl daoImpl = <span style="color: #0000ff">new</span> ItemDaoImpl();
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 13: daoImpl.setDataSource(source);
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 14:
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 15: <span style="color: #008000">// com.mervpolis.dwx.struts2spring.dao.ItemDao</span>
</pre>
 <pre style="font-size: 12px; margin: 0em; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #f9f9f9"> 16: ItemDao itemDao = daoImpl;</pre>
Cape juga ternyata, selamat menikmati hidangannya.
&lt;/p<pre></p>
]]></content>
  </entry>
  
</feed>
